
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fd  0080018a  0080018a  00000664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd9  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f7  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000634  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000291  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000581  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002616  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e4       	ldi	r30, 0x46	; 70
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 38       	cpi	r26, 0x8A	; 138
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	aa e8       	ldi	r26, 0x8A	; 138
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 38       	cpi	r26, 0x87	; 135
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 82 02 	call	0x504	; 0x504 <main>
  b2:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:

void USART_send(unsigned char data)
{
	/* Wait for data to be received */
	while (!( UCSR0A & (1<<UDRE0)));
	UDR0 = data;
  ba:	10 98       	cbi	0x02, 0	; 2
  bc:	88 23       	and	r24, r24
  be:	0c f4       	brge	.+2      	; 0xc2 <lcd_write+0x8>
  c0:	10 9a       	sbi	0x02, 0	; 2
  c2:	11 98       	cbi	0x02, 1	; 2
  c4:	86 fd       	sbrc	r24, 6
  c6:	11 9a       	sbi	0x02, 1	; 2
  c8:	12 98       	cbi	0x02, 2	; 2
  ca:	85 fd       	sbrc	r24, 5
  cc:	12 9a       	sbi	0x02, 2	; 2
  ce:	13 98       	cbi	0x02, 3	; 2
  d0:	84 fd       	sbrc	r24, 4
  d2:	13 9a       	sbi	0x02, 3	; 2
  d4:	14 9a       	sbi	0x02, 4	; 2
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_write+0x1e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_write+0x24>
  de:	14 98       	cbi	0x02, 4	; 2
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write+0x2e>
  e8:	08 95       	ret

000000ea <lcd_char>:
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
  ee:	15 9a       	sbi	0x02, 5	; 2
  f0:	14 98       	cbi	0x02, 4	; 2
  f2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_string>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
 10a:	88 81       	ld	r24, Y
 10c:	88 23       	and	r24, r24
 10e:	51 f0       	breq	.+20     	; 0x124 <lcd_string+0x20>
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 116:	85 e8       	ldi	r24, 0x85	; 133
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_string+0x14>
 11c:	00 00       	nop
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	f7 cf       	rjmp	.-18     	; 0x112 <lcd_string+0xe>
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_instruction>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	15 98       	cbi	0x02, 5	; 2
 130:	14 98       	cbi	0x02, 4	; 2
 132:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_instruction+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_instruction+0x14>
 13e:	8c 2f       	mov	r24, r28
 140:	82 95       	swap	r24
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_instruction+0x22>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_instruction+0x28>
 152:	00 00       	nop
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_init>:
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	8f 63       	ori	r24, 0x3F	; 63
 15c:	81 b9       	out	0x01, r24	; 1
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <lcd_init+0xc>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x16>
 16e:	00 00       	nop
 170:	15 98       	cbi	0x02, 5	; 2
 172:	14 98       	cbi	0x02, 4	; 2
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	9e e3       	ldi	r25, 0x3E	; 62
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x2c>
 184:	00 00       	nop
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 18c:	8f e8       	ldi	r24, 0x8F	; 143
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_init+0x3e>
 196:	00 00       	nop
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x4a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x50>
 1a8:	00 00       	nop
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1b0:	95 e8       	ldi	r25, 0x85	; 133
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x5a>
 1b6:	00 00       	nop
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1be:	25 e8       	ldi	r18, 0x85	; 133
 1c0:	2a 95       	dec	r18
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x68>
 1c4:	00 00       	nop
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x76>
 1d2:	00 00       	nop
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1da:	8f e6       	ldi	r24, 0x6F	; 111
 1dc:	97 e1       	ldi	r25, 0x17	; 23
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x86>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x8c>
 1e4:	00 00       	nop
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x96>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x9c>
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1fa:	25 e8       	ldi	r18, 0x85	; 133
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0xa4>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <USART_init>:
 204:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	80 83       	st	Z, r24
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <dac_write>:
	PORTB |= 1<<PORTB4; 					//ss high
}

void dac_write(uint16_t val)
{
	PORTB &= ~(1<<PORTB4); 		//turn off ss
 224:	2c 98       	cbi	0x05, 4	; 5

	val = val << 2;
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
	val |= (0b1001 << 12);
 22e:	90 69       	ori	r25, 0x90	; 144

	SPDR = val >> 8; 		//upper bytes
 230:	9e bd       	out	0x2e, r25	; 46

	while(!(SPSR & 1<<SPIF)); //wait til upper bytes done
 232:	0d b4       	in	r0, 0x2d	; 45
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <dac_write+0xe>

	SPDR = (0xFF & val); 		//lower bytes
 238:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & 1<<SPIF)); //wait til lower bytes done
 23a:	0d b4       	in	r0, 0x2d	; 45
 23c:	07 fe       	sbrs	r0, 7
 23e:	fd cf       	rjmp	.-6      	; 0x23a <dac_write+0x16>

	PORTB |= 1<<PORTB4; 	//turn on ss
 240:	2c 9a       	sbi	0x05, 4	; 5
 242:	08 95       	ret

00000244 <frequency>:
}

void frequency(uint32_t frequency)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	00 d0       	rcall	.+0      	; 0x24a <frequency+0x6>
 24a:	00 d0       	rcall	.+0      	; 0x24c <frequency+0x8>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	
	if (frequency == 0) {
 250:	61 15       	cp	r22, r1
 252:	71 05       	cpc	r23, r1
 254:	81 05       	cpc	r24, r1
 256:	91 05       	cpc	r25, r1
 258:	81 f4       	brne	.+32     	; 0x27a <frequency+0x36>
		for(volatile uint16_t i = 0; i < 1; i++);	//800 Hz
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	9c 81       	ldd	r25, Y+4	; 0x04
 262:	89 2b       	or	r24, r25
 264:	f1 f4       	brne	.+60     	; 0x2a2 <frequency+0x5e>
 266:	8b 81       	ldd	r24, Y+3	; 0x03
 268:	9c 81       	ldd	r25, Y+4	; 0x04
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	9c 83       	std	Y+4, r25	; 0x04
 26e:	8b 83       	std	Y+3, r24	; 0x03
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	89 2b       	or	r24, r25
 276:	b9 f3       	breq	.-18     	; 0x266 <frequency+0x22>
 278:	14 c0       	rjmp	.+40     	; 0x2a2 <frequency+0x5e>
	}
	
	else if (frequency == 1) {
 27a:	61 30       	cpi	r22, 0x01	; 1
 27c:	71 05       	cpc	r23, r1
 27e:	81 05       	cpc	r24, r1
 280:	91 05       	cpc	r25, r1
 282:	79 f4       	brne	.+30     	; 0x2a2 <frequency+0x5e>
		for(volatile uint16_t i = 0; i < 2; i++);	//1 kHz
 284:	1a 82       	std	Y+2, r1	; 0x02
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	02 97       	sbiw	r24, 0x02	; 2
 28e:	48 f4       	brcc	.+18     	; 0x2a2 <frequency+0x5e>
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	9a 83       	std	Y+2, r25	; 0x02
 298:	89 83       	std	Y+1, r24	; 0x01
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	02 97       	sbiw	r24, 0x02	; 2
 2a0:	b8 f3       	brcs	.-18     	; 0x290 <frequency+0x4c>
	}
		

}
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <output_waveform>:

void output_waveform(uint32_t value, uint16_t arr[])
{
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	6b 01       	movw	r12, r22
 2c2:	7c 01       	movw	r14, r24
 2c4:	ea 01       	movw	r28, r20
 2c6:	8a 01       	movw	r16, r20
 2c8:	0c 59       	subi	r16, 0x9C	; 156
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
	{
		dac_write(arr[i]);
 2cc:	89 91       	ld	r24, Y+
 2ce:	99 91       	ld	r25, Y+
 2d0:	0e 94 12 01 	call	0x224	; 0x224 <dac_write>
		frequency(value);
 2d4:	c7 01       	movw	r24, r14
 2d6:	b6 01       	movw	r22, r12
 2d8:	0e 94 22 01 	call	0x244	; 0x244 <frequency>

}

void output_waveform(uint32_t value, uint16_t arr[])
{
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
 2dc:	c0 17       	cp	r28, r16
 2de:	d1 07       	cpc	r29, r17
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <output_waveform+0x1c>
	{
		dac_write(arr[i]);
		frequency(value);
	}
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	df 90       	pop	r13
 2f0:	cf 90       	pop	r12
 2f2:	08 95       	ret

000002f4 <beep>:

void beep(void) {
 2f4:	cf 93       	push	r28
 2f6:	c6 e9       	ldi	r28, 0x96	; 150
	
	for(uint8_t i = 0; i < 150; i++) {
		output_waveform(freq, (uint16_t *)sine);
 2f8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2fc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 300:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 304:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 308:	44 e0       	ldi	r20, 0x04	; 4
 30a:	51 e0       	ldi	r21, 0x01	; 1
 30c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <output_waveform>
 310:	c1 50       	subi	r28, 0x01	; 1
	}
}

void beep(void) {
	
	for(uint8_t i = 0; i < 150; i++) {
 312:	91 f7       	brne	.-28     	; 0x2f8 <beep+0x4>
		output_waveform(freq, (uint16_t *)sine);
	}
}
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <frequency_init>:

/***************************************************************** 125kHz wave **********************************************************/
void frequency_init(void) {
	DDRD |= (1 << PORTD7);
 318:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A |= (1<<WGM20 | 1<<WGM21 | 1<<COM2A0);
 31a:	e0 eb       	ldi	r30, 0xB0	; 176
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	83 64       	ori	r24, 0x43	; 67
 322:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22 | 1<<CS20); //Fast PWM
 324:	e1 eb       	ldi	r30, 0xB1	; 177
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	89 60       	ori	r24, 0x09	; 9
 32c:	80 83       	st	Z, r24
	OCR2A = 31;		// 8000000/64 = 125k, but it's half with 50% duty cycle. 31 was value with least percent error at 126.6 kHz
 32e:	8f e1       	ldi	r24, 0x1F	; 31
 330:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 334:	08 95       	ret

00000336 <interr_init>:
char card2[] = {0x33, 0x31, 0x30, 0x30, 0x33, 0x37, 0x44, 0x39, 0x33, 0x44};
char card3[] = {0x36, 0x46, 0x30, 0x30, 0x35, 0x43, 0x41, 0x44, 0x36, 0x30};


void interr_init(void) {
	DDRD &= ~(1 << PIND2);		//Receiver input
 336:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 1 << PIND2;		// pull up resistor
 338:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK = 1 << INT0;			//enable interrupt 0
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	8d bb       	out	0x1d, r24	; 29
	EIFR = 1 << INTF0;			//clear flag
 33e:	8c bb       	out	0x1c, r24	; 28
	MCUCR = 1 << ISC00;			//trigger on any edge
 340:	85 bf       	out	0x35, r24	; 53
 342:	08 95       	ret

00000344 <__vector_1>:
	
}

ISR(INT0_vect) {
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	8b eb       	ldi	r24, 0xBB	; 187
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <__vector_1+0x18>
 360:	00 c0       	rjmp	.+0      	; 0x362 <__vector_1+0x1e>
 362:	00 00       	nop
	
	_delay_us(350);
	
	RFID.buff[i] = ((PIND & 0x04)>>2);
 364:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <i>
 368:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <i+0x1>
 36c:	89 b1       	in	r24, 0x09	; 9
 36e:	e2 57       	subi	r30, 0x72	; 114
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	82 fb       	bst	r24, 2
 374:	88 27       	eor	r24, r24
 376:	80 f9       	bld	r24, 0
 378:	80 83       	st	Z, r24
	
	if (RFID.buff[i] == 1) {		
 37a:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <i>
 37e:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <i+0x1>
 382:	e2 57       	subi	r30, 0x72	; 114
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	80 81       	ld	r24, Z
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	a1 f4       	brne	.+40     	; 0x3b4 <__vector_1+0x70>
		count += RFID.buff[i];	
 38c:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <i>
 390:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <i+0x1>
 394:	e2 57       	subi	r30, 0x72	; 114
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	20 81       	ld	r18, Z
 39a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 39e:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <__data_end+0x1>
 3a2:	82 0f       	add	r24, r18
 3a4:	91 1d       	adc	r25, r1
 3a6:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <__data_end+0x1>
 3aa:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
	}
		
	else count = 0;	
	
	if(count == 9 && RFID.flag == false) {
 3ae:	09 97       	sbiw	r24, 0x09	; 9
 3b0:	31 f0       	breq	.+12     	; 0x3be <__vector_1+0x7a>
 3b2:	15 c0       	rjmp	.+42     	; 0x3de <__vector_1+0x9a>
	
	if (RFID.buff[i] == 1) {		
		count += RFID.buff[i];	
	}
		
	else count = 0;	
 3b4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <__data_end+0x1>
 3b8:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>
 3bc:	10 c0       	rjmp	.+32     	; 0x3de <__vector_1+0x9a>
	
	if(count == 9 && RFID.flag == false) {
 3be:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <RFID+0x1f8>
 3c2:	81 11       	cpse	r24, r1
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <__vector_1+0x9a>
		RFID.index = i+1;
 3c6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <i>
 3ca:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <i+0x1>
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <RFID+0x1f7>
 3d4:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <RFID+0x1f6>
		RFID.flag = true;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <RFID+0x1f8>
		}
		
	if(i < 499) i++;
 3de:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <i>
 3e2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <i+0x1>
 3e6:	83 3f       	cpi	r24, 0xF3	; 243
 3e8:	91 40       	sbci	r25, 0x01	; 1
 3ea:	54 f4       	brge	.+20     	; 0x400 <__FUSE_REGION_LENGTH__>
 3ec:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <i>
 3f0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <i+0x1>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <i+0x1>
 3fa:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <i>
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
	
	else {
		i = 0;
 400:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <i+0x1>
 404:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <i>
		RFID.flag = false;
 408:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <RFID+0x1f8>
	}
	
	EIFR = 1 << INTF0; //clear flag
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	8c bb       	out	0x1c, r24	; 28
	
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <found_tag>:

bool found_tag(void){

	if(i == 499){
 424:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <i>
 428:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <i+0x1>
 42c:	83 3f       	cpi	r24, 0xF3	; 243
 42e:	91 40       	sbci	r25, 0x01	; 1
 430:	09 f0       	breq	.+2      	; 0x434 <found_tag+0x10>
 432:	64 c0       	rjmp	.+200    	; 0x4fc <found_tag+0xd8>
		RFID.tag = 0;	
		for(int j = 11; j <51; j++){
			RFID.tag += RFID.buff[RFID.index + j];
 434:	40 91 84 03 	lds	r20, 0x0384	; 0x800384 <RFID+0x1f6>
 438:	50 91 85 03 	lds	r21, 0x0385	; 0x800385 <RFID+0x1f7>
 43c:	fa 01       	movw	r30, r20
 43e:	e2 57       	subi	r30, 0x72	; 114
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	83 85       	ldd	r24, Z+11	; 0x0b
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <RFID+0x1f5>
 44a:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <RFID+0x1f4>
 44e:	fa 01       	movw	r30, r20
 450:	e6 56       	subi	r30, 0x66	; 102
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	4f 53       	subi	r20, 0x3F	; 63
 456:	5e 4f       	sbci	r21, 0xFE	; 254
 458:	21 91       	ld	r18, Z+
 45a:	82 0f       	add	r24, r18
 45c:	91 1d       	adc	r25, r1
			
			if (j == 50){
 45e:	e4 17       	cp	r30, r20
 460:	f5 07       	cpc	r31, r21
 462:	d1 f7       	brne	.-12     	; 0x458 <found_tag+0x34>
 464:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <RFID+0x1f5>
 468:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <RFID+0x1f4>
				
				switch(RFID.tag){
 46c:	80 32       	cpi	r24, 0x20	; 32
 46e:	91 05       	cpc	r25, r1
 470:	d9 f0       	breq	.+54     	; 0x4a8 <found_tag+0x84>
 472:	81 32       	cpi	r24, 0x21	; 33
 474:	91 05       	cpc	r25, r1
 476:	69 f1       	breq	.+90     	; 0x4d2 <found_tag+0xae>
 478:	4f 97       	sbiw	r24, 0x1f	; 31
 47a:	09 f0       	breq	.+2      	; 0x47e <found_tag+0x5a>
 47c:	41 c0       	rjmp	.+130    	; 0x500 <found_tag+0xdc>
					case 31:
					cli();
 47e:	f8 94       	cli
					lcd_instruction(clear);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
					lcd_string((uint8_t *) "2C00AC693E");
 486:	88 e6       	ldi	r24, 0x68	; 104
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
					beep();
 48e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <beep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	97 ea       	ldi	r25, 0xA7	; 167
 496:	21 e6       	ldi	r18, 0x61	; 97
 498:	81 50       	subi	r24, 0x01	; 1
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	20 40       	sbci	r18, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <found_tag+0x74>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <found_tag+0x7e>
 4a2:	00 00       	nop
					beep();
					_delay_ms(4000);
					break;
					
				}
				return true;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	08 95       	ret
					beep();
					_delay_ms(4000);
					break;
					
					case 32:
					cli();
 4a8:	f8 94       	cli
					lcd_instruction(clear);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
					lcd_string((uint8_t *) "310037D93D");
 4b0:	83 e7       	ldi	r24, 0x73	; 115
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
					beep();
 4b8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <beep>
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	97 ea       	ldi	r25, 0xA7	; 167
 4c0:	21 e6       	ldi	r18, 0x61	; 97
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	20 40       	sbci	r18, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <found_tag+0x9e>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <found_tag+0xa8>
 4cc:	00 00       	nop
					beep();
					_delay_ms(4000);
					break;
					
				}
				return true;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 95       	ret
					beep();
					_delay_ms(4000);
					break;
					
					case 33:
					cli();
 4d2:	f8 94       	cli
					lcd_instruction(clear);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
					lcd_string((uint8_t *) "6F005CAD60");
 4da:	8e e7       	ldi	r24, 0x7E	; 126
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
					beep();
 4e2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <beep>
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	97 ea       	ldi	r25, 0xA7	; 167
 4ea:	21 e6       	ldi	r18, 0x61	; 97
 4ec:	81 50       	subi	r24, 0x01	; 1
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	20 40       	sbci	r18, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <found_tag+0xc8>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <found_tag+0xd2>
 4f6:	00 00       	nop
					_delay_ms(4000);
					break;
					
				}
				return true;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	08 95       	ret
			}
		}
	
	}
	
	return false;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
					beep();
					_delay_ms(4000);
					break;
					
				}
				return true;
 500:	81 e0       	ldi	r24, 0x01	; 1
	
	}
	
	return false;
	
}
 502:	08 95       	ret

00000504 <main>:

int main( void )
{

	 
	lcd_init();
 504:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	USART_init();
 508:	0e 94 02 01 	call	0x204	; 0x204 <USART_init>
	frequency_init();
 50c:	0e 94 8c 01 	call	0x318	; 0x318 <frequency_init>
	interr_init();
 510:	0e 94 9b 01 	call	0x336	; 0x336 <interr_init>
volatile uint32_t adcVal = 0;
volatile uint32_t freq = 1;

void inline SPI_init()
{
	DDRB |= (1<<PORTB5 | 1<<PORTB7 | 1<<PORTB4); 	// initializing ss, sck, and mosi pins
 514:	84 b1       	in	r24, 0x04	; 4
 516:	80 6b       	ori	r24, 0xB0	; 176
 518:	84 b9       	out	0x04, r24	; 4
	SPSR |= 1<<SPI2X;
 51a:	8d b5       	in	r24, 0x2d	; 45
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1<<SPE | 1<<MSTR); 			//enabling master mode, frequency 2 mhz
 520:	8c b5       	in	r24, 0x2c	; 44
 522:	80 65       	ori	r24, 0x50	; 80
 524:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; 					//ss high
 526:	2c 9a       	sbi	0x05, 4	; 5
	frequency_init();
	interr_init();
	SPI_init();

	
	sei();
 528:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52a:	87 e5       	ldi	r24, 0x57	; 87
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <main+0x2a>
 532:	00 c0       	rjmp	.+0      	; 0x534 <main+0x30>
 534:	00 00       	nop
	
	while (1) {

		_delay_us(300);
		if(!found_tag()) continue;
 536:	0e 94 12 02 	call	0x424	; 0x424 <found_tag>
 53a:	88 23       	and	r24, r24
 53c:	b1 f3       	breq	.-20     	; 0x52a <main+0x26>
		sei();
 53e:	78 94       	sei
 540:	f4 cf       	rjmp	.-24     	; 0x52a <main+0x26>

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
