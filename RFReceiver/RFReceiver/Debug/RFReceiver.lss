
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000004dc  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800176  00800176  000005e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b17  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ff  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d2  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000507  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000248d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ed       	ldi	r30, 0xDC	; 220
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 37       	cpi	r26, 0x76	; 118
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 e7       	ldi	r26, 0x76	; 118
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 39       	cpi	r26, 0x93	; 147
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 14 02 	call	0x428	; 0x428 <main>
  b2:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
}


void lcd_write(uint8_t byte)
{
	lcdPort &= ~(1 << lcdD7Bit);                        // assume that data is '0'
  ba:	10 98       	cbi	0x02, 0	; 2
	if (byte & 1 << 7) lcdPort |= (1 << lcdD7Bit);     // make data = '1' if necessary
  bc:	88 23       	and	r24, r24
  be:	0c f4       	brge	.+2      	; 0xc2 <lcd_write+0x8>
  c0:	10 9a       	sbi	0x02, 0	; 2

	lcdPort &= ~(1 << lcdD6Bit);                        // repeat for each data bit
  c2:	11 98       	cbi	0x02, 1	; 2
	if (byte & 1 << 6) lcdPort |= (1 << lcdD6Bit);
  c4:	86 fd       	sbrc	r24, 6
  c6:	11 9a       	sbi	0x02, 1	; 2

	lcdPort &= ~(1 << lcdD5Bit);
  c8:	12 98       	cbi	0x02, 2	; 2
	if (byte & 1 << 5) lcdPort |= (1 << lcdD5Bit);
  ca:	85 fd       	sbrc	r24, 5
  cc:	12 9a       	sbi	0x02, 2	; 2

	lcdPort &= ~(1 << lcdD4Bit);
  ce:	13 98       	cbi	0x02, 3	; 2
	if (byte & 1 << 4) lcdPort |= (1 << lcdD4Bit);
  d0:	84 fd       	sbrc	r24, 4
  d2:	13 9a       	sbi	0x02, 3	; 2

	// write the data
	
	lcdPort |= (1 << lcdEBit);                   // E high
  d4:	14 9a       	sbi	0x02, 4	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_write+0x1e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_write+0x24>
	_delay_us(1);                               // data setup
	lcdPort &= ~(1 << lcdEBit);                // E low
  de:	14 98       	cbi	0x02, 4	; 2
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write+0x2e>
  e8:	08 95       	ret

000000ea <lcd_char>:
}



void lcd_char(uint8_t data)
{
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
	lcdPort |= (1 << lcdRSBit);                 // RS high
  ee:	15 9a       	sbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                // E low
  f0:	14 98       	cbi	0x02, 4	; 2
	lcd_write(data);                          // write the upper four bits of data
  f2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	lcd_write(data << 4);                    // write the lower 4 bits of data
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_string>:
	_delay_us(50);               // same delay as off
}


void lcd_string(uint8_t string[])
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 10a:	88 81       	ld	r24, Y
 10c:	88 23       	and	r24, r24
 10e:	51 f0       	breq	.+20     	; 0x124 <lcd_string+0x20>
 110:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_char(string[i]);
 112:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 116:	85 e8       	ldi	r24, 0x85	; 133
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_string+0x14>
 11c:	00 00       	nop


void lcd_string(uint8_t string[])
{
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	f7 cf       	rjmp	.-18     	; 0x112 <lcd_string+0xe>
	{
		lcd_char(string[i]);
		i++;
		_delay_us(50);                              //40 us delay min
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_instruction>:
	lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
		lcdPort &= ~(1 << lcdRSBit);                // RS low
 12e:	15 98       	cbi	0x02, 5	; 2
		lcdPort &= ~(1 << lcdEBit);                // E low
 130:	14 98       	cbi	0x02, 4	; 2
		lcd_write(instruction);                   // write the upper 4 bits of data
 132:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_instruction+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_instruction+0x14>
		_delay_us(10);
		lcd_write(instruction << 4);             // write the lower 4 bits of data
 13e:	8c 2f       	mov	r24, r28
 140:	82 95       	swap	r24
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_instruction+0x22>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_instruction+0x28>
 152:	00 00       	nop
		_delay_ms(5);
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_init>:
void lcd_init(void);


void lcd_init(void)
{
	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	8f 63       	ori	r24, 0x3F	; 63
 15c:	81 b9       	out	0x01, r24	; 1
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <lcd_init+0xc>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x16>
 16e:	00 00       	nop
	_delay_ms(100);

	lcdPort &= ~(1 << lcdRSBit);                 // RS low
 170:	15 98       	cbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                 // E low
 172:	14 98       	cbi	0x02, 4	; 2

	// LCD resets
	lcd_write(reset);
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	9e e3       	ldi	r25, 0x3E	; 62
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x2c>
 184:	00 00       	nop
	_delay_ms(8);                           // 5 ms delay min

	lcd_write(reset);
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e8       	ldi	r24, 0x8F	; 143
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_init+0x3e>
 196:	00 00       	nop
	_delay_us(200);                       // 100 us delay min

	lcd_write(reset);
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x4a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x50>
 1a8:	00 00       	nop
	_delay_us(200);
	
	lcd_write(bit4Mode);               	//set to 4 bit mode
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1b0:	95 e8       	ldi	r25, 0x85	; 133
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x5a>
 1b6:	00 00       	nop
	_delay_us(50);                     // 40us delay min

	lcd_instruction(bit4Mode);   	 // set 4 bit mode
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1be:	25 e8       	ldi	r18, 0x85	; 133
 1c0:	2a 95       	dec	r18
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x68>
 1c4:	00 00       	nop
	_delay_us(50);                  // 40 us delay min

	// display off
	lcd_instruction(off);        	// turn off display
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x76>
 1d2:	00 00       	nop
	_delay_us(50);

	// Clear display
	lcd_instruction(clear);              // clear display
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e6       	ldi	r24, 0x6F	; 111
 1dc:	97 e1       	ldi	r25, 0x17	; 23
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x86>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x8c>
 1e4:	00 00       	nop
	_delay_ms(3);                       // 1.64 ms delay min

	// entry mode
	lcd_instruction(entryMode);          // this instruction shifts the cursor
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x96>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x9c>
	_delay_us(40);                      // 40 us delay min

	// Display on
	lcd_instruction(on);          // turn on the display
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1fa:	25 e8       	ldi	r18, 0x85	; 133
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0xa4>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <USART_init>:
/*********************************************************** USART Configuration *****************************************************************/

void USART_init(void)
{
	/*Set baud rate */
	UBRR0H = (BAUDRATE>>8);
 204:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUDRATE;
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	80 83       	st	Z, r24

	/* Set frame format: 8data, 1stop bit, no parity */
	UCSR0C = (3<<UCSZ00);
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	/* Enable interrupt */
	UCSR0B |= (1 << RXCIE0);
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while(~(UCSR0A) & (1<<RXC0));
 224:	e0 ec       	ldi	r30, 0xC0	; 192
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 23       	and	r24, r24
 22c:	ec f7       	brge	.-6      	; 0x228 <USART_receive+0x4>

	/* Get and return received data from buffer */
	return UDR0;
 22e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 232:	08 95       	ret

00000234 <USART_send>:

void USART_send(unsigned char data)
{
	/* Wait for data to be received */
	while (!( UCSR0A & (1<<UDRE0)));
 234:	e0 ec       	ldi	r30, 0xC0	; 192
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	95 ff       	sbrs	r25, 5
 23c:	fd cf       	rjmp	.-6      	; 0x238 <USART_send+0x4>
	UDR0 = data;
 23e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 242:	08 95       	ret

00000244 <__vector_20>:
inline void RFID_ready(void) {
	/* RFID buffer is ready to be refilled*/
	RF.done = false;
}

ISR(USART0_RX_vect){
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	/* load RFID into buffer */
	char num = USART_receive();
 266:	0e 94 12 01 	call	0x224	; 0x224 <USART_receive>
	if(!RF.done) {
 26a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <RF+0x12>
 26e:	91 11       	cpse	r25, r1
 270:	17 c0       	rjmp	.+46     	; 0x2a0 <__vector_20+0x5c>
		RF.ID[RF.index++] = num;
 272:	a8 e7       	ldi	r26, 0x78	; 120
 274:	b1 e0       	ldi	r27, 0x01	; 1
 276:	51 96       	adiw	r26, 0x11	; 17
 278:	ec 91       	ld	r30, X
 27a:	51 97       	sbiw	r26, 0x11	; 17
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	9e 0f       	add	r25, r30
 280:	51 96       	adiw	r26, 0x11	; 17
 282:	9c 93       	st	X, r25
 284:	51 97       	sbiw	r26, 0x11	; 17
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e8 58       	subi	r30, 0x88	; 136
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	80 83       	st	Z, r24
		if(RF.index == SIZE) {
 28e:	51 96       	adiw	r26, 0x11	; 17
 290:	9c 91       	ld	r25, X
 292:	51 97       	sbiw	r26, 0x11	; 17
 294:	90 31       	cpi	r25, 0x10	; 16
 296:	21 f4       	brne	.+8      	; 0x2a0 <__vector_20+0x5c>
			RF.index = 0;
 298:	fd 01       	movw	r30, r26
 29a:	11 8a       	std	Z+17, r1	; 0x11
			RF.done = true;
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	92 8b       	std	Z+18, r25	; 0x12
		}
	}
	USART_send(num);
 2a0:	0e 94 1a 01 	call	0x234	; 0x234 <USART_send>

}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <dac_write>:
	PORTB |= 1<<PORTB4; 					//ss high
}

void dac_write(uint16_t val)
{
	PORTB &= ~(1<<PORTB4); 		//turn off ss
 2c6:	2c 98       	cbi	0x05, 4	; 5

	val = val << 2;
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
	val |= (0b1001 << 12);
 2d0:	90 69       	ori	r25, 0x90	; 144

	SPDR = val >> 8; 		//upper bytes
 2d2:	9e bd       	out	0x2e, r25	; 46

	while(!(SPSR & 1<<SPIF)); //wait til upper bytes done
 2d4:	0d b4       	in	r0, 0x2d	; 45
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <dac_write+0xe>

	SPDR = (0xFF & val); 		//lower bytes
 2da:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & 1<<SPIF)); //wait til lower bytes done
 2dc:	0d b4       	in	r0, 0x2d	; 45
 2de:	07 fe       	sbrs	r0, 7
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <dac_write+0x16>

	PORTB |= 1<<PORTB4; 	//turn on ss
 2e2:	2c 9a       	sbi	0x05, 4	; 5
 2e4:	08 95       	ret

000002e6 <frequency>:
}

void frequency(uint32_t frequency)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <frequency+0x6>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <frequency+0x8>
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	
	if (frequency == 0) {
 2f2:	61 15       	cp	r22, r1
 2f4:	71 05       	cpc	r23, r1
 2f6:	81 05       	cpc	r24, r1
 2f8:	91 05       	cpc	r25, r1
 2fa:	81 f4       	brne	.+32     	; 0x31c <frequency+0x36>
		for(volatile uint16_t i = 0; i < 1; i++);	//800 Hz
 2fc:	1c 82       	std	Y+4, r1	; 0x04
 2fe:	1b 82       	std	Y+3, r1	; 0x03
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	9c 81       	ldd	r25, Y+4	; 0x04
 304:	89 2b       	or	r24, r25
 306:	f1 f4       	brne	.+60     	; 0x344 <frequency+0x5e>
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	9c 81       	ldd	r25, Y+4	; 0x04
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	9c 83       	std	Y+4, r25	; 0x04
 310:	8b 83       	std	Y+3, r24	; 0x03
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	9c 81       	ldd	r25, Y+4	; 0x04
 316:	89 2b       	or	r24, r25
 318:	b9 f3       	breq	.-18     	; 0x308 <frequency+0x22>
 31a:	14 c0       	rjmp	.+40     	; 0x344 <frequency+0x5e>
	}
	
	else if (frequency == 1) {
 31c:	61 30       	cpi	r22, 0x01	; 1
 31e:	71 05       	cpc	r23, r1
 320:	81 05       	cpc	r24, r1
 322:	91 05       	cpc	r25, r1
 324:	79 f4       	brne	.+30     	; 0x344 <frequency+0x5e>
		for(volatile uint16_t i = 0; i < 2; i++);	//1 kHz
 326:	1a 82       	std	Y+2, r1	; 0x02
 328:	19 82       	std	Y+1, r1	; 0x01
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	9a 81       	ldd	r25, Y+2	; 0x02
 32e:	02 97       	sbiw	r24, 0x02	; 2
 330:	48 f4       	brcc	.+18     	; 0x344 <frequency+0x5e>
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	9a 83       	std	Y+2, r25	; 0x02
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	9a 81       	ldd	r25, Y+2	; 0x02
 340:	02 97       	sbiw	r24, 0x02	; 2
 342:	b8 f3       	brcs	.-18     	; 0x332 <frequency+0x4c>
	}
		

}
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <output_waveform>:

void output_waveform(uint32_t value, uint16_t arr[])
{
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	6b 01       	movw	r12, r22
 364:	7c 01       	movw	r14, r24
 366:	ea 01       	movw	r28, r20
 368:	8a 01       	movw	r16, r20
 36a:	0c 59       	subi	r16, 0x9C	; 156
 36c:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
	{
		dac_write(arr[i]);
 36e:	89 91       	ld	r24, Y+
 370:	99 91       	ld	r25, Y+
 372:	0e 94 63 01 	call	0x2c6	; 0x2c6 <dac_write>
		frequency(value);
 376:	c7 01       	movw	r24, r14
 378:	b6 01       	movw	r22, r12
 37a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <frequency>

}

void output_waveform(uint32_t value, uint16_t arr[])
{
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
 37e:	c0 17       	cp	r28, r16
 380:	d1 07       	cpc	r29, r17
 382:	a9 f7       	brne	.-22     	; 0x36e <output_waveform+0x1c>
	{
		dac_write(arr[i]);
		frequency(value);
	}
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	cf 90       	pop	r12
 394:	08 95       	ret

00000396 <frequency_init>:

/***************************************************************** 125kHz wave **********************************************************/
void frequency_init(void) {
	DDRD |= (1 << PORTD7);
 396:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A |= (1<<WGM20 | 1<<WGM21 | 1<<COM2A0);
 398:	e0 eb       	ldi	r30, 0xB0	; 176
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	83 64       	ori	r24, 0x43	; 67
 3a0:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22 | 1<<CS20); //Fast PWM
 3a2:	e1 eb       	ldi	r30, 0xB1	; 177
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	89 60       	ori	r24, 0x09	; 9
 3aa:	80 83       	st	Z, r24
	OCR2A = 31;		// 8000000/64 = 125k, but it's half with 50% duty cycle. 31 was value with least percent error at 126.6 kHz
 3ac:	8f e1       	ldi	r24, 0x1F	; 31
 3ae:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3b2:	08 95       	ret

000003b4 <input_capture_init>:
uint16_t ov_counter;
uint16_t rising, falling;
uint32_t count;

void input_capture_init(void) {
	TIMSK1= 0x21;					//enable overflow and input capture interrupts
 3b4:	81 e2       	ldi	r24, 0x21	; 33
 3b6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B= (1<<ICNC1) | (1<<ICES1); /*Noise canceler, rising edge*/
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c0:	08 95       	ret

000003c2 <__vector_15>:
}

ISR(TIMER1_OVF_vect){
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
	ov_counter++;
 3d0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 3d4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 3de:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
}
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_12>:

ISR(TIMER1_CAPT_vect){
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
	
	if(ICP){						//if rising edge
		rising = ICR1;				//save start time
 3fe:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 402:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 406:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <rising+0x1>
 40a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <rising>
		TCCR1B = (0<<ICES1);		//trigger on falling edge
 40e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		ov_counter = 0;
 412:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__data_end+0x1>
 416:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
		TCCR1B = (1<<ICES1);		//trigger on rising edge
		
		count = (uint32_t)falling - (uint32_t)rising - (uint32_t)ov_counter;
	}
	
}
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <main>:


int main( void )
{

	lcd_init();
 428:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	USART_init();
 42c:	0e 94 02 01 	call	0x204	; 0x204 <USART_init>
	frequency_init();
 430:	0e 94 cb 01 	call	0x396	; 0x396 <frequency_init>
	input_capture_init();
 434:	0e 94 da 01 	call	0x3b4	; 0x3b4 <input_capture_init>
volatile uint32_t adcVal = 0;
volatile uint32_t freq = 1;

void inline SPI_init()
{
	DDRB |= (1<<PORTB5 | 1<<PORTB7 | 1<<PORTB4); 	// initializing ss, sck, and mosi pins
 438:	84 b1       	in	r24, 0x04	; 4
 43a:	80 6b       	ori	r24, 0xB0	; 176
 43c:	84 b9       	out	0x04, r24	; 4
	SPSR |= 1<<SPI2X;
 43e:	8d b5       	in	r24, 0x2d	; 45
 440:	81 60       	ori	r24, 0x01	; 1
 442:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1<<SPE | 1<<MSTR); 			//enabling master mode, frequency 2 mhz
 444:	8c b5       	in	r24, 0x2c	; 44
 446:	80 65       	ori	r24, 0x50	; 80
 448:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; 					//ss high
 44a:	2c 9a       	sbi	0x05, 4	; 5
	USART_init();
	frequency_init();
	input_capture_init();
	SPI_init();
	
	sei();
 44c:	78 94       	sei
	volatile uint8_t index;
	volatile bool done;
}RF;

inline void RFID_done(void) {
	while(!RF.done);
 44e:	08 e7       	ldi	r16, 0x78	; 120
 450:	11 e0       	ldi	r17, 0x01	; 1
 452:	dd 24       	eor	r13, r13
 454:	d3 94       	inc	r13
 456:	e1 2c       	mov	r14, r1
		for(uint8_t i = 1; i < 11; i++) {
			lcd_char(RF.ID[i]);
			_delay_us(50);
		}
		
		USART_send('\n');
 458:	0f 2e       	mov	r0, r31
 45a:	f6 e9       	ldi	r31, 0x96	; 150
 45c:	ff 2e       	mov	r15, r31
 45e:	f0 2d       	mov	r31, r0
	sei();

	
	while (1) {
		
		lcd_instruction(clear);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
		lcd_string((uint8_t *)"Ready to Scan");
 466:	88 e6       	ldi	r24, 0x68	; 104
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
		lcd_instruction(setCursor | lineTwo);
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	volatile uint8_t index;
	volatile bool done;
}RF;

inline void RFID_done(void) {
	while(!RF.done);
 474:	f8 01       	movw	r30, r16
 476:	82 89       	ldd	r24, Z+18	; 0x12
 478:	88 23       	and	r24, r24
 47a:	e1 f3       	breq	.-8      	; 0x474 <main+0x4c>
 47c:	cd 2d       	mov	r28, r13
 47e:	de 2d       	mov	r29, r14
		lcd_instruction(setCursor | lineTwo);
		
		RFID_done();
		
		for(uint8_t i = 1; i < 11; i++) {
			lcd_char(RF.ID[i]);
 480:	fe 01       	movw	r30, r28
 482:	e8 58       	subi	r30, 0x88	; 136
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	80 81       	ld	r24, Z
 488:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 48c:	85 e8       	ldi	r24, 0x85	; 133
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <main+0x66>
 492:	00 00       	nop
 494:	21 96       	adiw	r28, 0x01	; 1
		lcd_string((uint8_t *)"Ready to Scan");
		lcd_instruction(setCursor | lineTwo);
		
		RFID_done();
		
		for(uint8_t i = 1; i < 11; i++) {
 496:	cb 30       	cpi	r28, 0x0B	; 11
 498:	d1 05       	cpc	r29, r1
 49a:	91 f7       	brne	.-28     	; 0x480 <main+0x58>
			lcd_char(RF.ID[i]);
			_delay_us(50);
		}
		
		USART_send('\n');
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	0e 94 1a 01 	call	0x234	; 0x234 <USART_send>
 4a2:	cf 2d       	mov	r28, r15
		for(uint8_t i = 0; i < 150; i++) {
			output_waveform(freq, (uint16_t *)sine);
 4a4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 4a8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 4ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 4b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 4b4:	44 e0       	ldi	r20, 0x04	; 4
 4b6:	51 e0       	ldi	r21, 0x01	; 1
 4b8:	0e 94 a9 01 	call	0x352	; 0x352 <output_waveform>
 4bc:	c1 50       	subi	r28, 0x01	; 1
			lcd_char(RF.ID[i]);
			_delay_us(50);
		}
		
		USART_send('\n');
		for(uint8_t i = 0; i < 150; i++) {
 4be:	91 f7       	brne	.-28     	; 0x4a4 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
 4c2:	ed e3       	ldi	r30, 0x3D	; 61
 4c4:	f9 e4       	ldi	r31, 0x49	; 73
 4c6:	91 50       	subi	r25, 0x01	; 1
 4c8:	e0 40       	sbci	r30, 0x00	; 0
 4ca:	f0 40       	sbci	r31, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <main+0x9e>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0xa8>
 4d0:	00 00       	nop
	while(!RF.done);
}

inline void RFID_ready(void) {
	/* RFID buffer is ready to be refilled*/
	RF.done = false;
 4d2:	f8 01       	movw	r30, r16
 4d4:	12 8a       	std	Z+18, r1	; 0x12
 4d6:	c4 cf       	rjmp	.-120    	; 0x460 <main+0x38>

000004d8 <_exit>:
 4d8:	f8 94       	cli

000004da <__stop_program>:
 4da:	ff cf       	rjmp	.-2      	; 0x4da <__stop_program>
