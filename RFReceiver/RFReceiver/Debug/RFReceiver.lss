
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000438  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fd  00800122  00800122  000004ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b80  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f7  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000616  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000291  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000581  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e3       	ldi	r30, 0x38	; 56
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 32       	cpi	r26, 0x22	; 34
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	a2 e2       	ldi	r26, 0x22	; 34
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	af 31       	cpi	r26, 0x1F	; 31
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 01 02 	call	0x402	; 0x402 <main>
  b2:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
void beep(void) {
	
	for(uint8_t i = 0; i < 150; i++) {
		output_waveform(freq, (uint16_t *)sine);
	}
}
  ba:	10 98       	cbi	0x02, 0	; 2
  bc:	88 23       	and	r24, r24
  be:	0c f4       	brge	.+2      	; 0xc2 <lcd_write+0x8>
  c0:	10 9a       	sbi	0x02, 0	; 2
  c2:	11 98       	cbi	0x02, 1	; 2
  c4:	86 fd       	sbrc	r24, 6
  c6:	11 9a       	sbi	0x02, 1	; 2
  c8:	12 98       	cbi	0x02, 2	; 2
  ca:	85 fd       	sbrc	r24, 5
  cc:	12 9a       	sbi	0x02, 2	; 2
  ce:	13 98       	cbi	0x02, 3	; 2
  d0:	84 fd       	sbrc	r24, 4
  d2:	13 9a       	sbi	0x02, 3	; 2
  d4:	14 9a       	sbi	0x02, 4	; 2
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_write+0x1e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_write+0x24>
  de:	14 98       	cbi	0x02, 4	; 2
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write+0x2e>
  e8:	08 95       	ret

000000ea <lcd_char>:
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
  ee:	15 9a       	sbi	0x02, 5	; 2
  f0:	14 98       	cbi	0x02, 4	; 2
  f2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_string>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
 10a:	88 81       	ld	r24, Y
 10c:	88 23       	and	r24, r24
 10e:	51 f0       	breq	.+20     	; 0x124 <lcd_string+0x20>
 110:	21 96       	adiw	r28, 0x01	; 1
 112:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 116:	85 e8       	ldi	r24, 0x85	; 133
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_string+0x14>
 11c:	00 00       	nop
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	f7 cf       	rjmp	.-18     	; 0x112 <lcd_string+0xe>
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_instruction>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	15 98       	cbi	0x02, 5	; 2
 130:	14 98       	cbi	0x02, 4	; 2
 132:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_instruction+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_instruction+0x14>
 13e:	8c 2f       	mov	r24, r28
 140:	82 95       	swap	r24
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_instruction+0x22>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_instruction+0x28>
 152:	00 00       	nop
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_init>:
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	8f 63       	ori	r24, 0x3F	; 63
 15c:	81 b9       	out	0x01, r24	; 1
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <lcd_init+0xc>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x16>
 16e:	00 00       	nop
 170:	15 98       	cbi	0x02, 5	; 2
 172:	14 98       	cbi	0x02, 4	; 2
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	9e e3       	ldi	r25, 0x3E	; 62
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x2c>
 184:	00 00       	nop
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 18c:	8f e8       	ldi	r24, 0x8F	; 143
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_init+0x3e>
 196:	00 00       	nop
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x4a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x50>
 1a8:	00 00       	nop
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1b0:	95 e8       	ldi	r25, 0x85	; 133
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x5a>
 1b6:	00 00       	nop
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1be:	25 e8       	ldi	r18, 0x85	; 133
 1c0:	2a 95       	dec	r18
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x68>
 1c4:	00 00       	nop
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x76>
 1d2:	00 00       	nop
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1da:	8f e6       	ldi	r24, 0x6F	; 111
 1dc:	97 e1       	ldi	r25, 0x17	; 23
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x86>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x8c>
 1e4:	00 00       	nop
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x96>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x9c>
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1fa:	25 e8       	ldi	r18, 0x85	; 133
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0xa4>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <USART_init>:
 204:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	80 83       	st	Z, r24
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <frequency_init>:

/***************************************************************** 125kHz wave **********************************************************/
void frequency_init(void) {
	DDRD |= (1 << PORTD7);
 224:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A |= (1<<WGM20 | 1<<WGM21 | 1<<COM2A0);
 226:	e0 eb       	ldi	r30, 0xB0	; 176
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	83 64       	ori	r24, 0x43	; 67
 22e:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22 | 1<<CS20); //Fast PWM
 230:	e1 eb       	ldi	r30, 0xB1	; 177
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	89 60       	ori	r24, 0x09	; 9
 238:	80 83       	st	Z, r24
	OCR2A = 31;		// 8000000/64 = 125k, but it's half with 50% duty cycle. 31 was value with least percent error at 126.6 kHz
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 240:	08 95       	ret

00000242 <interr_init>:
char card2[] = {0x33, 0x31, 0x30, 0x30, 0x33, 0x37, 0x44, 0x39, 0x33, 0x44};
char card3[] = {0x36, 0x46, 0x30, 0x30, 0x35, 0x43, 0x41, 0x44, 0x36, 0x30};


void interr_init(void) {
	DDRD &= ~(1 << PIND2);		//Receiver input
 242:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 1 << PIND2;		// pull up resistor
 244:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK = 1 << INT0;			//enable interrupt 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	8d bb       	out	0x1d, r24	; 29
	EIFR = 1 << INTF0;			//clear flag
 24a:	8c bb       	out	0x1c, r24	; 28
	MCUCR = 1 << ISC00;			//trigger on any edge
 24c:	85 bf       	out	0x35, r24	; 53
 24e:	08 95       	ret

00000250 <__vector_1>:
	
}

ISR(INT0_vect) {
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8b eb       	ldi	r24, 0xBB	; 187
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <__vector_1+0x18>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <__vector_1+0x1e>
 26e:	00 00       	nop
	
	_delay_us(350);
	
	RFID.buff[i] = ((PIND & 0x04)>>2);
 270:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <i>
 274:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <i+0x1>
 278:	89 b1       	in	r24, 0x09	; 9
 27a:	ea 5d       	subi	r30, 0xDA	; 218
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	82 fb       	bst	r24, 2
 280:	88 27       	eor	r24, r24
 282:	80 f9       	bld	r24, 0
 284:	80 83       	st	Z, r24
	
	if (RFID.buff[i] == 1) {		
 286:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <i>
 28a:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <i+0x1>
 28e:	ea 5d       	subi	r30, 0xDA	; 218
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	a1 f4       	brne	.+40     	; 0x2c0 <__vector_1+0x70>
		count += RFID.buff[i];	
 298:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <i>
 29c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <i+0x1>
 2a0:	ea 5d       	subi	r30, 0xDA	; 218
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	20 81       	ld	r18, Z
 2a6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 2aa:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 2ae:	82 0f       	add	r24, r18
 2b0:	91 1d       	adc	r25, r1
 2b2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 2b6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
	}
		
	else count = 0;	
	
	if(count == 9 && RFID.flag == false) {
 2ba:	09 97       	sbiw	r24, 0x09	; 9
 2bc:	31 f0       	breq	.+12     	; 0x2ca <__vector_1+0x7a>
 2be:	15 c0       	rjmp	.+42     	; 0x2ea <__vector_1+0x9a>
	
	if (RFID.buff[i] == 1) {		
		count += RFID.buff[i];	
	}
		
	else count = 0;	
 2c0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
 2c4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
 2c8:	10 c0       	rjmp	.+32     	; 0x2ea <__vector_1+0x9a>
	
	if(count == 9 && RFID.flag == false) {
 2ca:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RFID+0x1f8>
 2ce:	81 11       	cpse	r24, r1
 2d0:	0c c0       	rjmp	.+24     	; 0x2ea <__vector_1+0x9a>
		RFID.index = i+1;
 2d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 2d6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <i+0x1>
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <RFID+0x1f7>
 2e0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <RFID+0x1f6>
		RFID.flag = true;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <RFID+0x1f8>
		}
		
	if(i < 499) i++;
 2ea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 2ee:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <i+0x1>
 2f2:	83 3f       	cpi	r24, 0xF3	; 243
 2f4:	91 40       	sbci	r25, 0x01	; 1
 2f6:	54 f4       	brge	.+20     	; 0x30c <__vector_1+0xbc>
 2f8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 2fc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <i+0x1>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <i+0x1>
 306:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <i>
 30a:	06 c0       	rjmp	.+12     	; 0x318 <__vector_1+0xc8>
	
	else {
		i = 0;
 30c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <i+0x1>
 310:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <i>
		RFID.flag = false;
 314:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <RFID+0x1f8>
	}
	
	EIFR = 1 << INTF0; //clear flag
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8c bb       	out	0x1c, r24	; 28
	
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <found_tag>:

bool found_tag(void){

	if(i == 499){
 330:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <i>
 334:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <i+0x1>
 338:	83 3f       	cpi	r24, 0xF3	; 243
 33a:	91 40       	sbci	r25, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <found_tag+0x10>
 33e:	5d c0       	rjmp	.+186    	; 0x3fa <found_tag+0xca>
		RFID.tag = 0;	
		for(int j = 11; j <51; j++){
			RFID.tag += RFID.buff[RFID.index + j];
 340:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <RFID+0x1f6>
 344:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <RFID+0x1f7>
 348:	fa 01       	movw	r30, r20
 34a:	ea 5d       	subi	r30, 0xDA	; 218
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	83 85       	ldd	r24, Z+11	; 0x0b
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <RFID+0x1f5>
 356:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <RFID+0x1f4>
 35a:	fa 01       	movw	r30, r20
 35c:	ee 5c       	subi	r30, 0xCE	; 206
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	47 5a       	subi	r20, 0xA7	; 167
 362:	5e 4f       	sbci	r21, 0xFE	; 254
 364:	21 91       	ld	r18, Z+
 366:	82 0f       	add	r24, r18
 368:	91 1d       	adc	r25, r1
			
			if (j == 50){
 36a:	e4 17       	cp	r30, r20
 36c:	f5 07       	cpc	r31, r21
 36e:	d1 f7       	brne	.-12     	; 0x364 <found_tag+0x34>
 370:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <RFID+0x1f5>
 374:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <RFID+0x1f4>
				
				switch(RFID.tag){
 378:	80 32       	cpi	r24, 0x20	; 32
 37a:	91 05       	cpc	r25, r1
 37c:	c1 f0       	breq	.+48     	; 0x3ae <found_tag+0x7e>
 37e:	81 32       	cpi	r24, 0x21	; 33
 380:	91 05       	cpc	r25, r1
 382:	41 f1       	breq	.+80     	; 0x3d4 <found_tag+0xa4>
 384:	4f 97       	sbiw	r24, 0x1f	; 31
 386:	d9 f5       	brne	.+118    	; 0x3fe <found_tag+0xce>
					case 31:
					cli();
 388:	f8 94       	cli
					lcd_instruction(clear);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
					lcd_string((uint8_t *) "2C00AC693E");
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	93 ed       	ldi	r25, 0xD3	; 211
 39c:	20 e3       	ldi	r18, 0x30	; 48
 39e:	81 50       	subi	r24, 0x01	; 1
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	20 40       	sbci	r18, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <found_tag+0x6e>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <found_tag+0x78>
 3a8:	00 00       	nop
					_delay_ms(2000);
					break;
					
				}
				
				return true;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
					lcd_string((uint8_t *) "2C00AC693E");
					_delay_ms(2000);
					break;
					
					case 32:
					cli();
 3ae:	f8 94       	cli
					lcd_instruction(clear);
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
					lcd_string((uint8_t *) "310037D93D");
 3b6:	8b e0       	ldi	r24, 0x0B	; 11
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	93 ed       	ldi	r25, 0xD3	; 211
 3c2:	20 e3       	ldi	r18, 0x30	; 48
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	20 40       	sbci	r18, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <found_tag+0x94>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <found_tag+0x9e>
 3ce:	00 00       	nop
					_delay_ms(2000);
					break;
					
				}
				
				return true;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	08 95       	ret
					lcd_string((uint8_t *) "310037D93D");
					_delay_ms(2000);
					break;
					
					case 33:
					cli();
 3d4:	f8 94       	cli
					lcd_instruction(clear);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
					lcd_string((uint8_t *) "6F005CAD60");
 3dc:	86 e1       	ldi	r24, 0x16	; 22
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	93 ed       	ldi	r25, 0xD3	; 211
 3e8:	20 e3       	ldi	r18, 0x30	; 48
 3ea:	81 50       	subi	r24, 0x01	; 1
 3ec:	90 40       	sbci	r25, 0x00	; 0
 3ee:	20 40       	sbci	r18, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <found_tag+0xba>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <found_tag+0xc4>
 3f4:	00 00       	nop
					_delay_ms(2000);
					break;
					
				}
				
				return true;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret
			}
		}
	
	}
	
	return false;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
					_delay_ms(2000);
					break;
					
				}
				
				return true;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
	
	}
	
	return false;
	
}
 400:	08 95       	ret

00000402 <main>:

int main( void )
{

	 
	lcd_init();
 402:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	USART_init();
 406:	0e 94 02 01 	call	0x204	; 0x204 <USART_init>
	frequency_init();
 40a:	0e 94 12 01 	call	0x224	; 0x224 <frequency_init>
	interr_init();
 40e:	0e 94 21 01 	call	0x242	; 0x242 <interr_init>
volatile uint32_t adcVal = 0;
volatile uint32_t freq = 1;

void inline SPI_init()
{
	DDRB |= (1<<PORTB5 | 1<<PORTB7 | 1<<PORTB4); 	// initializing ss, sck, and mosi pins
 412:	84 b1       	in	r24, 0x04	; 4
 414:	80 6b       	ori	r24, 0xB0	; 176
 416:	84 b9       	out	0x04, r24	; 4
	SPSR |= 1<<SPI2X;
 418:	8d b5       	in	r24, 0x2d	; 45
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1<<SPE | 1<<MSTR); 			//enabling master mode, frequency 2 mhz
 41e:	8c b5       	in	r24, 0x2c	; 44
 420:	80 65       	ori	r24, 0x50	; 80
 422:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; 					//ss high
 424:	2c 9a       	sbi	0x05, 4	; 5
	frequency_init();
	interr_init();
	SPI_init();

	
	sei();
 426:	78 94       	sei
	
	while (1) {

		if(!found_tag()) continue;
 428:	0e 94 98 01 	call	0x330	; 0x330 <found_tag>
 42c:	88 23       	and	r24, r24
 42e:	e1 f3       	breq	.-8      	; 0x428 <main+0x26>
		sei();
 430:	78 94       	sei
 432:	fa cf       	rjmp	.-12     	; 0x428 <main+0x26>

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
