
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000747  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000243  00000000  00000000  00000b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fc  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000217  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_20>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 31       	cpi	r26, 0x13	; 19
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <lcd_write>:
}


void lcd_write(uint8_t byte)
{
	lcdPort &= ~(1 << lcdD7Bit);                        // assume that data is '0'
  a4:	5f 98       	cbi	0x0b, 7	; 11
	if (byte & 1 << 7) lcdPort |= (1 << lcdD7Bit);     // make data = '1' if necessary
  a6:	88 23       	and	r24, r24
  a8:	0c f4       	brge	.+2      	; 0xac <lcd_write+0x8>
  aa:	5f 9a       	sbi	0x0b, 7	; 11

	lcdPort &= ~(1 << lcdD6Bit);                        // repeat for each data bit
  ac:	5e 98       	cbi	0x0b, 6	; 11
	if (byte & 1 << 6) lcdPort |= (1 << lcdD6Bit);
  ae:	86 fd       	sbrc	r24, 6
  b0:	5e 9a       	sbi	0x0b, 6	; 11

	lcdPort &= ~(1 << lcdD5Bit);
  b2:	5d 98       	cbi	0x0b, 5	; 11
	if (byte & 1 << 5) lcdPort |= (1 << lcdD5Bit);
  b4:	85 fd       	sbrc	r24, 5
  b6:	5d 9a       	sbi	0x0b, 5	; 11

	lcdPort &= ~(1 << lcdD4Bit);
  b8:	5c 98       	cbi	0x0b, 4	; 11
	if (byte & 1 << 4) lcdPort |= (1 << lcdD4Bit);
  ba:	84 fd       	sbrc	r24, 4
  bc:	5c 9a       	sbi	0x0b, 4	; 11

	// write the data
	
	lcdPort |= (1 << lcdEBit);                   // E high
  be:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_write+0x1e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_write+0x24>
	_delay_us(1);                               // data setup
	lcdPort &= ~(1 << lcdEBit);                // E low
  c8:	5b 98       	cbi	0x0b, 3	; 11
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_write+0x28>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_write+0x2e>
  d2:	08 95       	ret

000000d4 <lcd_char>:
}



void lcd_char(uint8_t data)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	lcdPort |= (1 << lcdRSBit);                 // RS high
  d8:	5a 9a       	sbi	0x0b, 2	; 11
	lcdPort &= ~(1 << lcdEBit);                // E low
  da:	5b 98       	cbi	0x0b, 3	; 11
	lcd_write(data);                          // write the upper four bits of data
  dc:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
	lcd_write(data << 4);                    // write the lower 4 bits of data
  e0:	8c 2f       	mov	r24, r28
  e2:	82 95       	swap	r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
}
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_string>:
	_delay_us(50);               // same delay as off
}


void lcd_string(char string[])
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <lcd_string+0xa>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	8c 01       	movw	r16, r24
	volatile int i = 0;                             //while the string is not empty
  fe:	1a 82       	std	Y+2, r1	; 0x02
 100:	19 82       	std	Y+1, r1	; 0x01
	while (string[i] != 0)
 102:	e9 81       	ldd	r30, Y+1	; 0x01
 104:	fa 81       	ldd	r31, Y+2	; 0x02
 106:	e8 0f       	add	r30, r24
 108:	f9 1f       	adc	r31, r25
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	a1 f0       	breq	.+40     	; 0x138 <lcd_string+0x4a>
	{
		lcd_char(string[i]);
 110:	e9 81       	ldd	r30, Y+1	; 0x01
 112:	fa 81       	ldd	r31, Y+2	; 0x02
 114:	e0 0f       	add	r30, r16
 116:	f1 1f       	adc	r31, r17
 118:	80 81       	ld	r24, Z
 11a:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_char>
		i++;
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	3a 81       	ldd	r19, Y+2	; 0x02
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	3a 83       	std	Y+2, r19	; 0x02
 128:	29 83       	std	Y+1, r18	; 0x01


void lcd_string(char string[])
{
	volatile int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 12a:	e9 81       	ldd	r30, Y+1	; 0x01
 12c:	fa 81       	ldd	r31, Y+2	; 0x02
 12e:	e0 0f       	add	r30, r16
 130:	f1 1f       	adc	r31, r17
 132:	80 81       	ld	r24, Z
 134:	81 11       	cpse	r24, r1
 136:	ec cf       	rjmp	.-40     	; 0x110 <lcd_string+0x22>
	{
		lcd_char(string[i]);
		i++;
	}
}
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <lcd_instruction>:
	lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	lcdPort &= ~(1 << lcdRSBit);                // RS low
 14a:	5a 98       	cbi	0x0b, 2	; 11
	lcdPort &= ~(1 << lcdEBit);                // E low
 14c:	5b 98       	cbi	0x0b, 3	; 11
	lcd_write(instruction);                   // write the upper 4 bits of data
 14e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
	lcd_write(instruction << 4);             // write the lower 4 bits of data
 152:	8c 2f       	mov	r24, r28
 154:	82 95       	swap	r24
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
}
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <lcd_init>:


void lcd_init(void)
{

	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
 160:	8a b1       	in	r24, 0x0a	; 10
 162:	8c 6f       	ori	r24, 0xFC	; 252
 164:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	80 e7       	ldi	r24, 0x70	; 112
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <lcd_init+0xc>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_init+0x16>
 176:	00 00       	nop
	_delay_ms(100);

	lcdPort &= ~(1 << lcdRSBit);                 // RS low
 178:	5a 98       	cbi	0x0b, 2	; 11
	lcdPort &= ~(1 << lcdEBit);                 // E low
 17a:	5b 98       	cbi	0x0b, 3	; 11

	// LCD resets
	lcd_write(reset);
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	9e e3       	ldi	r25, 0x3E	; 62
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x26>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x2c>
 18c:	00 00       	nop
	_delay_ms(8);                           // 5 ms delay min

	lcd_write(reset);
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e8       	ldi	r24, 0x8F	; 143
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0x38>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init+0x3e>
 19e:	00 00       	nop
	_delay_us(200);                       // 100 us delay min

	lcd_write(reset);
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 1a6:	8f e8       	ldi	r24, 0x8F	; 143
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x4a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x50>
 1b0:	00 00       	nop
	_delay_us(200);
	
	lcd_write(bit4Mode);               	//set to 4 bit mode
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 1b8:	95 e8       	ldi	r25, 0x85	; 133
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x5a>
 1be:	00 00       	nop
	_delay_us(50);                     // 40us delay min

	lcd_instruction(bit4Mode);   	 // set 4 bit mode
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_instruction>
 1c6:	25 e8       	ldi	r18, 0x85	; 133
 1c8:	2a 95       	dec	r18
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_init+0x68>
 1cc:	00 00       	nop
	_delay_us(50);                  // 40 us delay min

	// display off
	lcd_instruction(off);        	// turn off display
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_instruction>
 1d4:	85 e8       	ldi	r24, 0x85	; 133
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x76>
 1da:	00 00       	nop
	_delay_us(50);

	// Clear display
	lcd_instruction(clear);              // clear display
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f e6       	ldi	r24, 0x6F	; 111
 1e4:	97 e1       	ldi	r25, 0x17	; 23
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x86>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x8c>
 1ec:	00 00       	nop
	_delay_ms(3);                       // 1.64 ms delay min

	// entry mode
	lcd_instruction(entryMode);          // this instruction shifts the cursor
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	9a e6       	ldi	r25, 0x6A	; 106
 1f6:	9a 95       	dec	r25
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_init+0x96>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_init+0x9c>
	_delay_us(40);                      // 40 us delay min

	// Display on
	lcd_instruction(on);          // turn on the display
 1fc:	8c e0       	ldi	r24, 0x0C	; 12
 1fe:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_instruction>
 202:	25 e8       	ldi	r18, 0x85	; 133
 204:	2a 95       	dec	r18
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0xa4>
 208:	00 00       	nop
 20a:	08 95       	ret

0000020c <USART_Init>:
}

void USART_Init(void)
{
	/*Set baud rate */
	UBRR0H = (BAUDRATE>>8);
 20c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUDRATE;
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 216:	e1 ec       	ldi	r30, 0xC1	; 193
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	80 83       	st	Z, r24

	/* Set frame format: 8data, 1stop bit, no parity */
	UCSR0C = (3<<UCSZ00);
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B |= (1 << RXCIE0); // enable interrupt on receive
 224:	80 81       	ld	r24, Z
 226:	80 68       	ori	r24, 0x80	; 128
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <USART_Receive>:
}

unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while(~(UCSR0A) & (1<<RXC0));
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <USART_Receive+0x4>

	/* Get and return received data from buffer */
	return UDR0;
 236:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 23a:	08 95       	ret

0000023c <USART_Send>:

void USART_Send(unsigned char data)
{
	/* Wait for data to be received */
	while (!( UCSR0A & (1<<UDRE0))); 
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <USART_Send+0x4>
	UDR0 = data;
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24a:	08 95       	ret

0000024c <__vector_20>:

inline void RFID_ready(void) {
	RF.done = false;
}

ISR(USART0_RX_vect){
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31

	char num = USART_Receive();
 26e:	0e 94 16 01 	call	0x22c	; 0x22c <USART_Receive>
	if(!RF.done) {
 272:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_edata+0x12>
 276:	91 11       	cpse	r25, r1
 278:	17 c0       	rjmp	.+46     	; 0x2a8 <__vector_20+0x5c>
		RF.ID[RF.index++] = num;
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	51 96       	adiw	r26, 0x11	; 17
 280:	ec 91       	ld	r30, X
 282:	51 97       	sbiw	r26, 0x11	; 17
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	9e 0f       	add	r25, r30
 288:	51 96       	adiw	r26, 0x11	; 17
 28a:	9c 93       	st	X, r25
 28c:	51 97       	sbiw	r26, 0x11	; 17
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	e0 50       	subi	r30, 0x00	; 0
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	80 83       	st	Z, r24
		if(RF.index == SIZE) {
 296:	51 96       	adiw	r26, 0x11	; 17
 298:	9c 91       	ld	r25, X
 29a:	51 97       	sbiw	r26, 0x11	; 17
 29c:	90 31       	cpi	r25, 0x10	; 16
 29e:	21 f4       	brne	.+8      	; 0x2a8 <__vector_20+0x5c>
			RF.index = 0;
 2a0:	fd 01       	movw	r30, r26
 2a2:	11 8a       	std	Z+17, r1	; 0x11
			RF.done = true;
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	92 8b       	std	Z+18, r25	; 0x12
		}
	}
	USART_Send(num);
 2a8:	0e 94 1e 01 	call	0x23c	; 0x23c <USART_Send>

}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <main>:

int main( void )
{

	
	lcd_init();
 2ce:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_init>
	USART_Init();
 2d2:	0e 94 06 01 	call	0x20c	; 0x20c <USART_Init>
	sei();
 2d6:	78 94       	sei
	volatile uint8_t index;
	volatile bool done;
}RF;

inline void RFID_done(void) {
	while(!RF.done); //wait until the ID array is complete
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	d1 e0       	ldi	r29, 0x01	; 1
 2dc:	9a 89       	ldd	r25, Y+18	; 0x12
 2de:	99 23       	and	r25, r25
 2e0:	e9 f3       	breq	.-6      	; 0x2dc <main+0xe>


	while (1) {
		
		RFID_done();
		lcd_instruction(setCursor | lineOne);
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_instruction>
		lcd_string((char *)RF.ID);
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
		USART_Send('\n');
 2ee:	8a e0       	ldi	r24, 0x0A	; 10
 2f0:	0e 94 1e 01 	call	0x23c	; 0x23c <USART_Send>
inline void RFID_done(void) {
	while(!RF.done); //wait until the ID array is complete
}

inline void RFID_ready(void) {
	RF.done = false;
 2f4:	1a 8a       	std	Y+18, r1	; 0x12
 2f6:	f2 cf       	rjmp	.-28     	; 0x2dc <main+0xe>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
