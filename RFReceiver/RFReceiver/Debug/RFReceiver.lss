
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000007e0  00000874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000080b  00800176  00800176  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca7  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000316  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000767  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ea  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000761  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ee       	ldi	r30, 0xE0	; 224
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 37       	cpi	r26, 0x76	; 118
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	29 e0       	ldi	r18, 0x09	; 9
  a0:	a6 e7       	ldi	r26, 0x76	; 118
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 38       	cpi	r26, 0x81	; 129
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 97 03 	call	0x72e	; 0x72e <main>
  b2:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
}


void lcd_write(uint8_t byte)
{
	lcdPort &= ~(1 << lcdD7Bit);                        // assume that data is '0'
  ba:	10 98       	cbi	0x02, 0	; 2
	if (byte & 1 << 7) lcdPort |= (1 << lcdD7Bit);     // make data = '1' if necessary
  bc:	88 23       	and	r24, r24
  be:	0c f4       	brge	.+2      	; 0xc2 <lcd_write+0x8>
  c0:	10 9a       	sbi	0x02, 0	; 2

	lcdPort &= ~(1 << lcdD6Bit);                        // repeat for each data bit
  c2:	11 98       	cbi	0x02, 1	; 2
	if (byte & 1 << 6) lcdPort |= (1 << lcdD6Bit);
  c4:	86 fd       	sbrc	r24, 6
  c6:	11 9a       	sbi	0x02, 1	; 2

	lcdPort &= ~(1 << lcdD5Bit);
  c8:	12 98       	cbi	0x02, 2	; 2
	if (byte & 1 << 5) lcdPort |= (1 << lcdD5Bit);
  ca:	85 fd       	sbrc	r24, 5
  cc:	12 9a       	sbi	0x02, 2	; 2

	lcdPort &= ~(1 << lcdD4Bit);
  ce:	13 98       	cbi	0x02, 3	; 2
	if (byte & 1 << 4) lcdPort |= (1 << lcdD4Bit);
  d0:	84 fd       	sbrc	r24, 4
  d2:	13 9a       	sbi	0x02, 3	; 2

	// write the data
	
	lcdPort |= (1 << lcdEBit);                   // E high
  d4:	14 9a       	sbi	0x02, 4	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_write+0x1e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_write+0x24>
	_delay_us(1);                               // data setup
	lcdPort &= ~(1 << lcdEBit);                // E low
  de:	14 98       	cbi	0x02, 4	; 2
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write+0x2e>
  e8:	08 95       	ret

000000ea <lcd_char>:
}



void lcd_char(uint8_t data)
{
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
	lcdPort |= (1 << lcdRSBit);                 // RS high
  ee:	15 9a       	sbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                // E low
  f0:	14 98       	cbi	0x02, 4	; 2
	lcd_write(data);                          // write the upper four bits of data
  f2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	lcd_write(data << 4);                    // write the lower 4 bits of data
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_string>:
	_delay_us(50);               // same delay as off
}


void lcd_string(uint8_t string[])
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 10a:	88 81       	ld	r24, Y
 10c:	88 23       	and	r24, r24
 10e:	51 f0       	breq	.+20     	; 0x124 <lcd_string+0x20>
 110:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_char(string[i]);
 112:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 116:	85 e8       	ldi	r24, 0x85	; 133
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_string+0x14>
 11c:	00 00       	nop


void lcd_string(uint8_t string[])
{
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	f7 cf       	rjmp	.-18     	; 0x112 <lcd_string+0xe>
	{
		lcd_char(string[i]);
		i++;
		_delay_us(50);                              //40 us delay min
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_instruction>:
	lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
	lcdPort &= ~(1 << lcdRSBit);                // RS low
 12e:	15 98       	cbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                // E low
 130:	14 98       	cbi	0x02, 4	; 2
	lcd_write(instruction);                   // write the upper 4 bits of data
 132:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_instruction+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_instruction+0x14>
	_delay_us(10);
	lcd_write(instruction << 4);             // write the lower 4 bits of data
 13e:	8c 2f       	mov	r24, r28
 140:	82 95       	swap	r24
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_instruction+0x22>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_instruction+0x28>
 152:	00 00       	nop
	_delay_ms(5);
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_init>:
int find_card(void);


void lcd_init(void)
{
	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	8f 63       	ori	r24, 0x3F	; 63
 15c:	81 b9       	out	0x01, r24	; 1
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <lcd_init+0xc>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x16>
 16e:	00 00       	nop
	_delay_ms(100);

	lcdPort &= ~(1 << lcdRSBit);                 // RS low
 170:	15 98       	cbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                 // E low
 172:	14 98       	cbi	0x02, 4	; 2

	// LCD resets
	lcd_write(reset);
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	9e e3       	ldi	r25, 0x3E	; 62
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x2c>
 184:	00 00       	nop
	_delay_ms(8);                           // 5 ms delay min

	lcd_write(reset);
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e8       	ldi	r24, 0x8F	; 143
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_init+0x3e>
 196:	00 00       	nop
	_delay_us(200);                       // 100 us delay min

	lcd_write(reset);
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x4a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x50>
 1a8:	00 00       	nop
	_delay_us(200);
	
	lcd_write(bit4Mode);               	//set to 4 bit mode
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1b0:	95 e8       	ldi	r25, 0x85	; 133
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x5a>
 1b6:	00 00       	nop
	_delay_us(50);                     // 40us delay min

	lcd_instruction(bit4Mode);   	 // set 4 bit mode
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1be:	25 e8       	ldi	r18, 0x85	; 133
 1c0:	2a 95       	dec	r18
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x68>
 1c4:	00 00       	nop
	_delay_us(50);                  // 40 us delay min

	// display off
	lcd_instruction(off);        	// turn off display
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x76>
 1d2:	00 00       	nop
	_delay_us(50);

	// Clear display
	lcd_instruction(clear);              // clear display
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e6       	ldi	r24, 0x6F	; 111
 1dc:	97 e1       	ldi	r25, 0x17	; 23
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x86>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x8c>
 1e4:	00 00       	nop
	_delay_ms(3);                       // 1.64 ms delay min

	// entry mode
	lcd_instruction(entryMode);          // this instruction shifts the cursor
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x96>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x9c>
	_delay_us(40);                      // 40 us delay min

	// Display on
	lcd_instruction(on);          // turn on the display
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1fa:	25 e8       	ldi	r18, 0x85	; 133
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0xa4>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <USART_init>:
/*********************************************************** USART Configuration *****************************************************************/

void USART_init(void)
{
	/*Set baud rate */
	UBRR0H = (BAUDRATE>>8);
 204:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUDRATE;
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	80 83       	st	Z, r24

	/* Set frame format: 8data, 1stop bit, no parity */
	UCSR0C = (3<<UCSZ00);
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	/* Enable interrupt */
	UCSR0B |= (1 << RXCIE0);
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <USART_send>:
}

void USART_send(unsigned char data)
{
	/* Wait for data to be received */
	while (!( UCSR0A & (1<<UDRE0)));
 224:	e0 ec       	ldi	r30, 0xC0	; 192
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	95 ff       	sbrs	r25, 5
 22c:	fd cf       	rjmp	.-6      	; 0x228 <USART_send+0x4>
	UDR0 = data;
 22e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 232:	08 95       	ret

00000234 <dac_write>:
	PORTB |= 1<<PORTB4; 					//ss high
}

void dac_write(uint16_t val)
{
	PORTB &= ~(1<<PORTB4); 		//turn off ss
 234:	2c 98       	cbi	0x05, 4	; 5

	val = val << 2;
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
	val |= (0b1001 << 12);
 23e:	90 69       	ori	r25, 0x90	; 144

	SPDR = val >> 8; 		//upper bytes
 240:	9e bd       	out	0x2e, r25	; 46

	while(!(SPSR & 1<<SPIF)); //wait til upper bytes done
 242:	0d b4       	in	r0, 0x2d	; 45
 244:	07 fe       	sbrs	r0, 7
 246:	fd cf       	rjmp	.-6      	; 0x242 <dac_write+0xe>

	SPDR = (0xFF & val); 		//lower bytes
 248:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & 1<<SPIF)); //wait til lower bytes done
 24a:	0d b4       	in	r0, 0x2d	; 45
 24c:	07 fe       	sbrs	r0, 7
 24e:	fd cf       	rjmp	.-6      	; 0x24a <dac_write+0x16>

	PORTB |= 1<<PORTB4; 	//turn on ss
 250:	2c 9a       	sbi	0x05, 4	; 5
 252:	08 95       	ret

00000254 <frequency>:
}

void frequency(uint32_t frequency)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <frequency+0x6>
 25a:	00 d0       	rcall	.+0      	; 0x25c <frequency+0x8>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	
	if (frequency == 0) {
 260:	61 15       	cp	r22, r1
 262:	71 05       	cpc	r23, r1
 264:	81 05       	cpc	r24, r1
 266:	91 05       	cpc	r25, r1
 268:	81 f4       	brne	.+32     	; 0x28a <frequency+0x36>
		for(volatile uint16_t i = 0; i < 1; i++);	//800 Hz
 26a:	1c 82       	std	Y+4, r1	; 0x04
 26c:	1b 82       	std	Y+3, r1	; 0x03
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	9c 81       	ldd	r25, Y+4	; 0x04
 272:	89 2b       	or	r24, r25
 274:	f1 f4       	brne	.+60     	; 0x2b2 <frequency+0x5e>
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	9c 81       	ldd	r25, Y+4	; 0x04
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9c 83       	std	Y+4, r25	; 0x04
 27e:	8b 83       	std	Y+3, r24	; 0x03
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	9c 81       	ldd	r25, Y+4	; 0x04
 284:	89 2b       	or	r24, r25
 286:	b9 f3       	breq	.-18     	; 0x276 <frequency+0x22>
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <frequency+0x5e>
	}
	
	else if (frequency == 1) {
 28a:	61 30       	cpi	r22, 0x01	; 1
 28c:	71 05       	cpc	r23, r1
 28e:	81 05       	cpc	r24, r1
 290:	91 05       	cpc	r25, r1
 292:	79 f4       	brne	.+30     	; 0x2b2 <frequency+0x5e>
		for(volatile uint16_t i = 0; i < 2; i++);	//1 kHz
 294:	1a 82       	std	Y+2, r1	; 0x02
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	02 97       	sbiw	r24, 0x02	; 2
 29e:	48 f4       	brcc	.+18     	; 0x2b2 <frequency+0x5e>
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	9a 81       	ldd	r25, Y+2	; 0x02
 2ae:	02 97       	sbiw	r24, 0x02	; 2
 2b0:	b8 f3       	brcs	.-18     	; 0x2a0 <frequency+0x4c>
	}
	

}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <output_waveform>:

void output_waveform(uint32_t value, uint16_t arr[])
{
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	6b 01       	movw	r12, r22
 2d2:	7c 01       	movw	r14, r24
 2d4:	ea 01       	movw	r28, r20
 2d6:	8a 01       	movw	r16, r20
 2d8:	0c 59       	subi	r16, 0x9C	; 156
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
	{
		dac_write(arr[i]);
 2dc:	89 91       	ld	r24, Y+
 2de:	99 91       	ld	r25, Y+
 2e0:	0e 94 1a 01 	call	0x234	; 0x234 <dac_write>
		frequency(value);
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 2a 01 	call	0x254	; 0x254 <frequency>

}

void output_waveform(uint32_t value, uint16_t arr[])
{
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
 2ec:	c0 17       	cp	r28, r16
 2ee:	d1 07       	cpc	r29, r17
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <output_waveform+0x1c>
	{
		dac_write(arr[i]);
		frequency(value);
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <beep>:

void beep(void) {
 304:	cf 93       	push	r28
 306:	c6 e9       	ldi	r28, 0x96	; 150
	
	for(uint8_t i = 0; i < 150; i++) {
		output_waveform(freq, (uint16_t *)sine);
 308:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 30c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 314:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 318:	44 e0       	ldi	r20, 0x04	; 4
 31a:	51 e0       	ldi	r21, 0x01	; 1
 31c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <output_waveform>
 320:	c1 50       	subi	r28, 0x01	; 1
	}
}

void beep(void) {
	
	for(uint8_t i = 0; i < 150; i++) {
 322:	91 f7       	brne	.-28     	; 0x308 <beep+0x4>
		output_waveform(freq, (uint16_t *)sine);
	}
}
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <frequency_init>:

/***************************************************************** 125kHz wave **********************************************************/
void frequency_init(void) {
	DDRD |= (1 << PORTD7);
 328:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A |= (1<<WGM20 | 1<<WGM21 | 1<<COM2A0);
 32a:	e0 eb       	ldi	r30, 0xB0	; 176
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	83 64       	ori	r24, 0x43	; 67
 332:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22 | 1<<CS20); //Fast PWM
 334:	e1 eb       	ldi	r30, 0xB1	; 177
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	89 60       	ori	r24, 0x09	; 9
 33c:	80 83       	st	Z, r24
	OCR2A = 31;		// 8000000/64 = 125k, but it's half with 50% duty cycle. 31 was value with least percent error at 126.6 kHz
 33e:	8f e1       	ldi	r24, 0x1F	; 31
 340:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 344:	08 95       	ret

00000346 <timer1_init>:
}RFID;


void timer1_init()
{
	DDRD &= ~(1 << PIND2);		//Receiver input
 346:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 1 << PIND2;		// pull up resistor
 348:	5a 9a       	sbi	0x0b, 2	; 11
	TCCR1B |= (1<<CS10);	//Timer 1 no prescaler
 34a:	e1 e8       	ldi	r30, 0x81	; 129
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	81 60       	ori	r24, 0x01	; 1
 352:	80 83       	st	Z, r24
	TCNT1 = 0;	// initialize counter
 354:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 358:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 35c:	08 95       	ret

0000035e <read_value>:
	//OCR1A = 3999;		//Clear timer when it reaches this value, 500us delay

}

void read_value(void){
	if (TCNT1 >= 4008){ //if 500us has passed
 35e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 362:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 366:	88 3a       	cpi	r24, 0xA8	; 168
 368:	9f 40       	sbci	r25, 0x0F	; 15
 36a:	08 f4       	brcc	.+2      	; 0x36e <read_value+0x10>
 36c:	6a c0       	rjmp	.+212    	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
	TCNT1 = 0;
 36e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 372:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	RFID.data[z] = ((PIND & 0x04)>>2);
 376:	e0 91 7d 09 	lds	r30, 0x097D	; 0x80097d <z>
 37a:	f0 91 7e 09 	lds	r31, 0x097E	; 0x80097e <z+0x1>
 37e:	89 b1       	in	r24, 0x09	; 9
 380:	ea 58       	subi	r30, 0x8A	; 138
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	82 fb       	bst	r24, 2
 386:	88 27       	eor	r24, r24
 388:	80 f9       	bld	r24, 0
 38a:	80 83       	st	Z, r24
	
	if (RFID.data[z] == 1) {
 38c:	e0 91 7d 09 	lds	r30, 0x097D	; 0x80097d <z>
 390:	f0 91 7e 09 	lds	r31, 0x097E	; 0x80097e <z+0x1>
 394:	ea 58       	subi	r30, 0x8A	; 138
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	80 81       	ld	r24, Z
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	c1 f5       	brne	.+112    	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
		
		count++;
 39e:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <count>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <count>

		if(count == 9 && RFID.ready == false) {		//wait until 9 consecutive 1s
 3a8:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <count>
 3ac:	89 30       	cpi	r24, 0x09	; 9
 3ae:	89 f5       	brne	.+98     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 3b0:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <__data_end+0x7f8>
 3b4:	81 11       	cpse	r24, r1
 3b6:	2d c0       	rjmp	.+90     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
			
			RFID.index[ones] = z+1;		//store each index of each 9 1s
 3b8:	e0 91 7a 09 	lds	r30, 0x097A	; 0x80097a <ones>
 3bc:	f0 91 7b 09 	lds	r31, 0x097B	; 0x80097b <ones+0x1>
 3c0:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <z>
 3c4:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <z+0x1>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ea 5b       	subi	r30, 0xBA	; 186
 3d0:	f6 4f       	sbci	r31, 0xF6	; 246
 3d2:	91 83       	std	Z+1, r25	; 0x01
 3d4:	80 83       	st	Z, r24

			if (ones > 18){
 3d6:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <ones>
 3da:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <ones+0x1>
 3de:	43 97       	sbiw	r24, 0x13	; 19
 3e0:	60 f0       	brcs	.+24     	; 0x3fa <read_value+0x9c>
				RFID.ready = true;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <__data_end+0x7f8>
				found_nine_ones = true;
 3e8:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <found_nine_ones>
				ones = 0;
 3ec:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <ones+0x1>
 3f0:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <ones>
				count = 0;
 3f4:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <count>
 3f8:	0c c0       	rjmp	.+24     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
			}
			
			else ones++;
 3fa:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <ones>
 3fe:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <ones+0x1>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 7b 09 	sts	0x097B, r25	; 0x80097b <ones+0x1>
 408:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <ones>
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
		}
		
	}
	
	else count = 0;
 40e:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <count>
	
	if (z < 1998) z++;
 412:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <z>
 416:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <z+0x1>
 41a:	8e 3c       	cpi	r24, 0xCE	; 206
 41c:	97 40       	sbci	r25, 0x07	; 7
 41e:	50 f4       	brcc	.+20     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
 420:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <z>
 424:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <z+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 7e 09 	sts	0x097E, r25	; 0x80097e <z+0x1>
 42e:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <z>
 432:	08 95       	ret
	else { z = 0; RFID.done = true;}
 434:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <z+0x1>
 438:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <z>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <__data_end+0x7f9>
 442:	08 95       	ret

00000444 <manchester_done>:
		
	}
}


bool manchester_done(void) {
 444:	3f 92       	push	r3
 446:	4f 92       	push	r4
 448:	5f 92       	push	r5
 44a:	6f 92       	push	r6
 44c:	7f 92       	push	r7
 44e:	8f 92       	push	r8
 450:	9f 92       	push	r9
 452:	af 92       	push	r10
 454:	bf 92       	push	r11
 456:	cf 92       	push	r12
 458:	df 92       	push	r13
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	eb 97       	sbiw	r28, 0x3b	; 59
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
	
	if (RFID.done == true && found_nine_ones == true){
 476:	70 90 6f 09 	lds	r7, 0x096F	; 0x80096f <__data_end+0x7f9>
 47a:	77 20       	and	r7, r7
 47c:	09 f4       	brne	.+2      	; 0x480 <manchester_done+0x3c>
 47e:	38 c1       	rjmp	.+624    	; 0x6f0 <manchester_done+0x2ac>
 480:	70 90 7c 09 	lds	r7, 0x097C	; 0x80097c <found_nine_ones>
 484:	77 20       	and	r7, r7
 486:	09 f4       	brne	.+2      	; 0x48a <manchester_done+0x46>
 488:	33 c1       	rjmp	.+614    	; 0x6f0 <manchester_done+0x2ac>
		
		parity_error = false;
 48a:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <parity_error>
		
		unsigned int index;
		index = RFID.index[ones];
 48e:	e0 91 7a 09 	lds	r30, 0x097A	; 0x80097a <ones>
 492:	f0 91 7b 09 	lds	r31, 0x097B	; 0x80097b <ones+0x1>
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ea 5b       	subi	r30, 0xBA	; 186
 49c:	f6 4f       	sbci	r31, 0xF6	; 246
 49e:	40 80       	ld	r4, Z
 4a0:	51 80       	ldd	r5, Z+1	; 0x01
		volatile int row_parity[10] = {0};
 4a2:	94 e1       	ldi	r25, 0x14	; 20
 4a4:	fe 01       	movw	r30, r28
 4a6:	75 96       	adiw	r30, 0x15	; 21
 4a8:	df 01       	movw	r26, r30
 4aa:	29 2f       	mov	r18, r25
 4ac:	1d 92       	st	X+, r1
 4ae:	2a 95       	dec	r18
 4b0:	e9 f7       	brne	.-6      	; 0x4ac <manchester_done+0x68>
		volatile int col_parity[4] = {0};	
 4b2:	88 e0       	ldi	r24, 0x08	; 8
 4b4:	7c 96       	adiw	r30, 0x1c	; 28
 4b6:	df 01       	movw	r26, r30
 4b8:	28 2f       	mov	r18, r24
 4ba:	1d 92       	st	X+, r1
 4bc:	2a 95       	dec	r18
 4be:	e9 f7       	brne	.-6      	; 0x4ba <manchester_done+0x76>
		volatile int row_check[10] = {0};
 4c0:	f0 97       	sbiw	r30, 0x30	; 48
 4c2:	df 01       	movw	r26, r30
 4c4:	1d 92       	st	X+, r1
 4c6:	9a 95       	dec	r25
 4c8:	e9 f7       	brne	.-6      	; 0x4c4 <manchester_done+0x80>
		volatile int col_check[4] = {0};
 4ca:	b8 96       	adiw	r30, 0x28	; 40
 4cc:	df 01       	movw	r26, r30
 4ce:	1d 92       	st	X+, r1
 4d0:	8a 95       	dec	r24
 4d2:	e9 f7       	brne	.-6      	; 0x4ce <manchester_done+0x8a>
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f0 e7       	ldi	r31, 0x70	; 112
 4d8:	af 2e       	mov	r10, r31
 4da:	f9 e0       	ldi	r31, 0x09	; 9
 4dc:	bf 2e       	mov	r11, r31
 4de:	f0 2d       	mov	r31, r0
 4e0:	f2 01       	movw	r30, r4
 4e2:	e6 58       	subi	r30, 0x86	; 134
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	6f 01       	movw	r12, r30
 4e8:	e1 2c       	mov	r14, r1
 4ea:	f1 2c       	mov	r15, r1
			
		
		for (int8_t i = 0; i < 10; i++) {					//10 parity bits = 50 total iterations
			
			volatile int8_t rfid_char = 0;
 4ec:	0f 2e       	mov	r0, r31
 4ee:	f3 e0       	ldi	r31, 0x03	; 3
 4f0:	6f 2e       	mov	r6, r31
 4f2:	f0 2d       	mov	r31, r0
 4f4:	31 2c       	mov	r3, r1
 4f6:	1b ae       	std	Y+59, r1	; 0x3b
 4f8:	86 01       	movw	r16, r12
 4fa:	04 50       	subi	r16, 0x04	; 4
 4fc:	11 09       	sbc	r17, r1
 4fe:	26 2d       	mov	r18, r6
 500:	33 2d       	mov	r19, r3
			
			for (int8_t j = 3; j >= 0; j--) {
				int8_t decoded_data = RFID.data[index];		//save each bit
				rfid_char += decoded_data << j;				//shift 4 times to create 8 bit int
				
				row_check[i] += RFID.data[index];  //Miguel
 502:	9e 2c       	mov	r9, r14
 504:	8f 2c       	mov	r8, r15
 506:	d7 01       	movw	r26, r14
 508:	aa 0f       	add	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	4c 0f       	add	r20, r28
 512:	5d 1f       	adc	r21, r29
 514:	a4 0f       	add	r26, r20
 516:	b5 1f       	adc	r27, r21
		for (int8_t i = 0; i < 10; i++) {					//10 parity bits = 50 total iterations
			
			volatile int8_t rfid_char = 0;
			
			for (int8_t j = 3; j >= 0; j--) {
				int8_t decoded_data = RFID.data[index];		//save each bit
 518:	f8 01       	movw	r30, r16
 51a:	81 91       	ld	r24, Z+
 51c:	8f 01       	movw	r16, r30
				rfid_char += decoded_data << j;				//shift 4 times to create 8 bit int
 51e:	08 2e       	mov	r0, r24
 520:	00 0c       	add	r0, r0
 522:	99 0b       	sbc	r25, r25
 524:	6b ad       	ldd	r22, Y+59	; 0x3b
 526:	ac 01       	movw	r20, r24
 528:	02 2e       	mov	r0, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <manchester_done+0xec>
 52c:	44 0f       	add	r20, r20
 52e:	55 1f       	adc	r21, r21
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <manchester_done+0xe8>
 534:	46 0f       	add	r20, r22
 536:	4b af       	std	Y+59, r20	; 0x3b
				
				row_check[i] += RFID.data[index];  //Miguel
 538:	49 2d       	mov	r20, r9
 53a:	58 2d       	mov	r21, r8
 53c:	6d 91       	ld	r22, X+
 53e:	7c 91       	ld	r23, X
 540:	11 97       	sbiw	r26, 0x01	; 1
 542:	68 0f       	add	r22, r24
 544:	79 1f       	adc	r23, r25
 546:	11 96       	adiw	r26, 0x01	; 1
 548:	7c 93       	st	X, r23
 54a:	6e 93       	st	-X, r22
				row_check[i] = row_check[i] & 0x01;
 54c:	6d 91       	ld	r22, X+
 54e:	7c 91       	ld	r23, X
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	61 70       	andi	r22, 0x01	; 1
 554:	77 27       	eor	r23, r23
 556:	11 96       	adiw	r26, 0x01	; 1
 558:	7c 93       	st	X, r23
 55a:	6e 93       	st	-X, r22
				col_check[j] += RFID.data[index];
 55c:	f9 01       	movw	r30, r18
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	6c 0f       	add	r22, r28
 568:	7d 1f       	adc	r23, r29
 56a:	e6 0f       	add	r30, r22
 56c:	f7 1f       	adc	r31, r23
 56e:	60 a5       	ldd	r22, Z+40	; 0x28
 570:	71 a5       	ldd	r23, Z+41	; 0x29
 572:	86 0f       	add	r24, r22
 574:	97 1f       	adc	r25, r23
 576:	91 a7       	std	Z+41, r25	; 0x29
 578:	80 a7       	std	Z+40, r24	; 0x28
				col_check[j] = col_check[j] & 0x01;
 57a:	80 a5       	ldd	r24, Z+40	; 0x28
 57c:	91 a5       	ldd	r25, Z+41	; 0x29
 57e:	81 70       	andi	r24, 0x01	; 1
 580:	99 27       	eor	r25, r25
 582:	91 a7       	std	Z+41, r25	; 0x29
 584:	80 a7       	std	Z+40, r24	; 0x28
 586:	21 50       	subi	r18, 0x01	; 1
 588:	31 09       	sbc	r19, r1
 58a:	30 f6       	brcc	.-116    	; 0x518 <manchester_done+0xd4>
				
				index++;                                    //increment the index 4 times
													
			}
			
			RFID.cardID[i] = rfid_char;				//save each character
 58c:	8b ad       	ldd	r24, Y+59	; 0x3b
 58e:	d5 01       	movw	r26, r10
 590:	8d 93       	st	X+, r24
 592:	5d 01       	movw	r10, r26
			
			row_parity[i] = RFID.data[index];//save the row parity bit
 594:	f6 01       	movw	r30, r12
 596:	80 81       	ld	r24, Z
 598:	08 2e       	mov	r0, r24
 59a:	00 0c       	add	r0, r0
 59c:	99 0b       	sbc	r25, r25
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	e1 e0       	ldi	r30, 0x01	; 1
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	ec 0f       	add	r30, r28
 5a8:	fd 1f       	adc	r31, r29
 5aa:	e4 0f       	add	r30, r20
 5ac:	f5 1f       	adc	r31, r21
 5ae:	95 8b       	std	Z+21, r25	; 0x15
 5b0:	84 8b       	std	Z+20, r24	; 0x14
 5b2:	ff ef       	ldi	r31, 0xFF	; 255
 5b4:	ef 1a       	sub	r14, r31
 5b6:	ff 0a       	sbc	r15, r31
 5b8:	25 e0       	ldi	r18, 0x05	; 5
 5ba:	c2 0e       	add	r12, r18
 5bc:	d1 1c       	adc	r13, r1
		volatile int col_parity[4] = {0};	
		volatile int row_check[10] = {0};
		volatile int col_check[4] = {0};
			
		
		for (int8_t i = 0; i < 10; i++) {					//10 parity bits = 50 total iterations
 5be:	3a e0       	ldi	r19, 0x0A	; 10
 5c0:	e3 16       	cp	r14, r19
 5c2:	f1 04       	cpc	r15, r1
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <manchester_done+0x184>
 5c6:	97 cf       	rjmp	.-210    	; 0x4f6 <manchester_done+0xb2>
 5c8:	d2 01       	movw	r26, r4
 5ca:	a8 55       	subi	r26, 0x58	; 88
 5cc:	be 4f       	sbci	r27, 0xFE	; 254
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	90 e0       	ldi	r25, 0x00	; 0

		}
		
		
		for (int8_t j = 3; j >= 0; j--) {
			col_parity[j] = RFID.data[index];
 5d2:	2d 91       	ld	r18, X+
 5d4:	02 2e       	mov	r0, r18
 5d6:	00 0c       	add	r0, r0
 5d8:	33 0b       	sbc	r19, r19
 5da:	fc 01       	movw	r30, r24
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	50 e0       	ldi	r21, 0x00	; 0
 5e4:	4c 0f       	add	r20, r28
 5e6:	5d 1f       	adc	r21, r29
 5e8:	e4 0f       	add	r30, r20
 5ea:	f5 1f       	adc	r31, r21
 5ec:	31 ab       	std	Z+49, r19	; 0x31
 5ee:	20 ab       	std	Z+48, r18	; 0x30
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	78 f7       	brcc	.-34     	; 0x5d2 <manchester_done+0x18e>
			index++;
		}
		
		volatile int stopbit = RFID.data[index];
 5f4:	f2 01       	movw	r30, r4
 5f6:	ea 58       	subi	r30, 0x8A	; 138
 5f8:	fe 4f       	sbci	r31, 0xFE	; 254
 5fa:	86 a9       	ldd	r24, Z+54	; 0x36
 5fc:	08 2e       	mov	r0, r24
 5fe:	00 0c       	add	r0, r0
 600:	99 0b       	sbc	r25, r25
 602:	9a af       	std	Y+58, r25	; 0x3a
 604:	89 af       	std	Y+57, r24	; 0x39
 606:	00 e0       	ldi	r16, 0x00	; 0
 608:	10 e0       	ldi	r17, 0x00	; 0
		volatile int col_parity[4] = {0};	
		volatile int row_check[10] = {0};
		volatile int col_check[4] = {0};
			
		
		for (int8_t i = 0; i < 10; i++) {					//10 parity bits = 50 total iterations
 60a:	0f 2e       	mov	r0, r31
 60c:	f3 e0       	ldi	r31, 0x03	; 3
 60e:	df 2e       	mov	r13, r31
 610:	f0 2d       	mov	r31, r0
 612:	e1 2c       	mov	r14, r1
		
		volatile int stopbit = RFID.data[index];
		
		for (int8_t i = 0; i < 10; i++) {
			for (int8_t j = 3; j >= 0; j--) {			
		if(row_parity[i] != row_check[i] ) parity_error = true; //checking the row parity
 614:	ff 24       	eor	r15, r15
 616:	f3 94       	inc	r15
 618:	24 c0       	rjmp	.+72     	; 0x662 <manchester_done+0x21e>
 61a:	fb 01       	movw	r30, r22
 61c:	40 81       	ld	r20, Z
 61e:	51 81       	ldd	r21, Z+1	; 0x01
 620:	2d 91       	ld	r18, X+
 622:	3c 91       	ld	r19, X
 624:	11 97       	sbiw	r26, 0x01	; 1
 626:	42 17       	cp	r20, r18
 628:	53 07       	cpc	r21, r19
 62a:	11 f0       	breq	.+4      	; 0x630 <manchester_done+0x1ec>
 62c:	f0 92 7f 09 	sts	0x097F, r15	; 0x80097f <parity_error>
		if(col_parity[j] != col_check[j] ) parity_error = true; //checking the row parity
 630:	fc 01       	movw	r30, r24
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	2c 0f       	add	r18, r28
 63c:	3d 1f       	adc	r19, r29
 63e:	e2 0f       	add	r30, r18
 640:	f3 1f       	adc	r31, r19
 642:	40 a9       	ldd	r20, Z+48	; 0x30
 644:	51 a9       	ldd	r21, Z+49	; 0x31
 646:	20 a5       	ldd	r18, Z+40	; 0x28
 648:	31 a5       	ldd	r19, Z+41	; 0x29
 64a:	42 17       	cp	r20, r18
 64c:	53 07       	cpc	r21, r19
 64e:	11 f0       	breq	.+4      	; 0x654 <manchester_done+0x210>
 650:	f0 92 7f 09 	sts	0x097F, r15	; 0x80097f <parity_error>
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	08 f7       	brcc	.-62     	; 0x61a <manchester_done+0x1d6>
 658:	0f 5f       	subi	r16, 0xFF	; 255
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
			index++;
		}
		
		volatile int stopbit = RFID.data[index];
		
		for (int8_t i = 0; i < 10; i++) {
 65c:	0a 30       	cpi	r16, 0x0A	; 10
 65e:	11 05       	cpc	r17, r1
 660:	79 f0       	breq	.+30     	; 0x680 <manchester_done+0x23c>
		volatile int col_parity[4] = {0};	
		volatile int row_check[10] = {0};
		volatile int col_check[4] = {0};
			
		
		for (int8_t i = 0; i < 10; i++) {					//10 parity bits = 50 total iterations
 662:	8d 2d       	mov	r24, r13
 664:	9e 2d       	mov	r25, r14
		
		volatile int stopbit = RFID.data[index];
		
		for (int8_t i = 0; i < 10; i++) {
			for (int8_t j = 3; j >= 0; j--) {			
		if(row_parity[i] != row_check[i] ) parity_error = true; //checking the row parity
 666:	d8 01       	movw	r26, r16
 668:	aa 0f       	add	r26, r26
 66a:	bb 1f       	adc	r27, r27
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	50 e0       	ldi	r21, 0x00	; 0
 670:	4c 0f       	add	r20, r28
 672:	5d 1f       	adc	r21, r29
 674:	a4 0f       	add	r26, r20
 676:	b5 1f       	adc	r27, r21
 678:	bd 01       	movw	r22, r26
 67a:	6c 5e       	subi	r22, 0xEC	; 236
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	cd cf       	rjmp	.-102    	; 0x61a <manchester_done+0x1d6>
		if(col_parity[j] != col_check[j] ) parity_error = true; //checking the row parity
			}
		}
		
		
		if ((stopbit != 0) || (parity_error == true)){								//if the decoded rf id is noise
 680:	89 ad       	ldd	r24, Y+57	; 0x39
 682:	9a ad       	ldd	r25, Y+58	; 0x3a
 684:	89 2b       	or	r24, r25
 686:	21 f4       	brne	.+8      	; 0x690 <manchester_done+0x24c>
 688:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <parity_error>
 68c:	88 23       	and	r24, r24
 68e:	51 f1       	breq	.+84     	; 0x6e4 <manchester_done+0x2a0>
			if(ones < 18) index = RFID.index[ones++];	//move on to the next index of 9 1s
 690:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <ones>
 694:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <ones+0x1>
 698:	42 97       	sbiw	r24, 0x12	; 18
 69a:	a0 f4       	brcc	.+40     	; 0x6c4 <manchester_done+0x280>
 69c:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <ones>
 6a0:	90 91 7b 09 	lds	r25, 0x097B	; 0x80097b <ones+0x1>
 6a4:	9c 01       	movw	r18, r24
 6a6:	2f 5f       	subi	r18, 0xFF	; 255
 6a8:	3f 4f       	sbci	r19, 0xFF	; 255
 6aa:	30 93 7b 09 	sts	0x097B, r19	; 0x80097b <ones+0x1>
 6ae:	20 93 7a 09 	sts	0x097A, r18	; 0x80097a <ones>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	fc 01       	movw	r30, r24
 6b8:	ea 5b       	subi	r30, 0xBA	; 186
 6ba:	f6 4f       	sbci	r31, 0xF6	; 246
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
				found_nine_ones = false;
				index = 0;
				ones = 0;
				z = 0;
			}
			return false;
 6c0:	71 2c       	mov	r7, r1
 6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <manchester_done+0x2ac>
		
		
		if ((stopbit != 0) || (parity_error == true)){								//if the decoded rf id is noise
			if(ones < 18) index = RFID.index[ones++];	//move on to the next index of 9 1s
			else {										//if we run out of indexes, leave the function and rescan
				RFID.done = false;
 6c4:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x7f9>
				RFID.ready = false;
 6c8:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end+0x7f8>
				found_nine_ones = false;
 6cc:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <found_nine_ones>
				index = 0;
				ones = 0;
 6d0:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <ones+0x1>
 6d4:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <ones>
				z = 0;
 6d8:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <z+0x1>
 6dc:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <z>
			}
			return false;
 6e0:	71 2c       	mov	r7, r1
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <manchester_done+0x2ac>
		} 
		
		RFID.done = false;
 6e4:	10 92 6f 09 	sts	0x096F, r1	; 0x80096f <__data_end+0x7f9>
		RFID.ready = false;
 6e8:	10 92 6e 09 	sts	0x096E, r1	; 0x80096e <__data_end+0x7f8>
		found_nine_ones = false;
 6ec:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <found_nine_ones>
		index = 0;
		return true;
	}
	
	return false;
}
 6f0:	87 2d       	mov	r24, r7
 6f2:	eb 96       	adiw	r28, 0x3b	; 59
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	cf 90       	pop	r12
 70e:	bf 90       	pop	r11
 710:	af 90       	pop	r10
 712:	9f 90       	pop	r9
 714:	8f 90       	pop	r8
 716:	7f 90       	pop	r7
 718:	6f 90       	pop	r6
 71a:	5f 90       	pop	r5
 71c:	4f 90       	pop	r4
 71e:	3f 90       	pop	r3
 720:	08 95       	ret

00000722 <toChar>:

char toChar(int8_t i) {
	if ( 0 <= i && i <= 9){
 722:	8a 30       	cpi	r24, 0x0A	; 10
 724:	10 f4       	brcc	.+4      	; 0x72a <toChar+0x8>
		return i + '0';
 726:	80 5d       	subi	r24, 0xD0	; 208
 728:	08 95       	ret
		} else {
		return (i - 10) + 'A';
 72a:	89 5c       	subi	r24, 0xC9	; 201
	}
}
 72c:	08 95       	ret

0000072e <main>:


int main( void )
{
	
	lcd_init();
 72e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	USART_init();
 732:	0e 94 02 01 	call	0x204	; 0x204 <USART_init>
	frequency_init();
 736:	0e 94 94 01 	call	0x328	; 0x328 <frequency_init>
	timer1_init();
 73a:	0e 94 a3 01 	call	0x346	; 0x346 <timer1_init>
volatile uint32_t adcVal = 0;
volatile uint32_t freq = 1;

void inline SPI_init()
{
	DDRB |= (1<<PORTB5 | 1<<PORTB7 | 1<<PORTB4); 	// initializing ss, sck, and mosi pins
 73e:	84 b1       	in	r24, 0x04	; 4
 740:	80 6b       	ori	r24, 0xB0	; 176
 742:	84 b9       	out	0x04, r24	; 4
	SPSR |= 1<<SPI2X;
 744:	8d b5       	in	r24, 0x2d	; 45
 746:	81 60       	ori	r24, 0x01	; 1
 748:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1<<SPE | 1<<MSTR); 			//enabling master mode, frequency 2 mhz
 74a:	8c b5       	in	r24, 0x2c	; 44
 74c:	80 65       	ori	r24, 0x50	; 80
 74e:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; 					//ss high
 750:	2c 9a       	sbi	0x05, 4	; 5
	USART_init();
	frequency_init();
	timer1_init();
	SPI_init();
	
	lcd_instruction(clear);
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	lcd_string((uint8_t *)"Ready to Scan");
 758:	88 e6       	ldi	r24, 0x68	; 104
 75a:	91 e0       	ldi	r25, 0x01	; 1
 75c:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>
 760:	0f 2e       	mov	r0, r31
 762:	f0 e7       	ldi	r31, 0x70	; 112
 764:	cf 2e       	mov	r12, r31
 766:	f9 e0       	ldi	r31, 0x09	; 9
 768:	df 2e       	mov	r13, r31
 76a:	f0 2d       	mov	r31, r0
 76c:	0f 2e       	mov	r0, r31
 76e:	fa e7       	ldi	r31, 0x7A	; 122
 770:	ef 2e       	mov	r14, r31
 772:	f9 e0       	ldi	r31, 0x09	; 9
 774:	ff 2e       	mov	r15, r31
 776:	f0 2d       	mov	r31, r0

	
	while (1) {
		
		 read_value();
 778:	0e 94 af 01 	call	0x35e	; 0x35e <read_value>
		 
		 
		if(!manchester_done()) continue;
 77c:	0e 94 22 02 	call	0x444	; 0x444 <manchester_done>
 780:	88 23       	and	r24, r24
 782:	d1 f3       	breq	.-12     	; 0x778 <main+0x4a>

		lcd_instruction(clear);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 78a:	e6 01       	movw	r28, r12
 78c:	86 01       	movw	r16, r12
		
		for (int i = 0; i < 10; i++) {
			lcd_char(toChar(RFID.cardID[i]));
 78e:	f8 01       	movw	r30, r16
 790:	81 91       	ld	r24, Z+
 792:	8f 01       	movw	r16, r30
 794:	0e 94 91 03 	call	0x722	; 0x722 <toChar>
 798:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 79c:	f5 e8       	ldi	r31, 0x85	; 133
 79e:	fa 95       	dec	r31
 7a0:	f1 f7       	brne	.-4      	; 0x79e <main+0x70>
 7a2:	00 00       	nop
		 
		if(!manchester_done()) continue;

		lcd_instruction(clear);
		
		for (int i = 0; i < 10; i++) {
 7a4:	0e 15       	cp	r16, r14
 7a6:	1f 05       	cpc	r17, r15
 7a8:	91 f7       	brne	.-28     	; 0x78e <main+0x60>
			lcd_char(toChar(RFID.cardID[i]));
			_delay_us(50);
		}
		
		USART_send(0x0A);
 7aa:	8a e0       	ldi	r24, 0x0A	; 10
 7ac:	0e 94 12 01 	call	0x224	; 0x224 <USART_send>
		for (int i = 0; i < 10; i++) {
			USART_send(toChar(RFID.cardID[i]));
 7b0:	89 91       	ld	r24, Y+
 7b2:	0e 94 91 03 	call	0x722	; 0x722 <toChar>
 7b6:	0e 94 12 01 	call	0x224	; 0x224 <USART_send>
			lcd_char(toChar(RFID.cardID[i]));
			_delay_us(50);
		}
		
		USART_send(0x0A);
		for (int i = 0; i < 10; i++) {
 7ba:	ce 15       	cp	r28, r14
 7bc:	df 05       	cpc	r29, r15
 7be:	c1 f7       	brne	.-16     	; 0x7b0 <main+0x82>
			USART_send(toChar(RFID.cardID[i]));
		}
		USART_send(0x0D);
 7c0:	8d e0       	ldi	r24, 0x0D	; 13
 7c2:	0e 94 12 01 	call	0x224	; 0x224 <USART_send>
		
		beep();
 7c6:	0e 94 82 01 	call	0x304	; 0x304 <beep>
		
		//_delay_ms(500);
		
		ones = 0;
 7ca:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <ones+0x1>
 7ce:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <ones>
		z = 0;
 7d2:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <z+0x1>
 7d6:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <z>
 7da:	ce cf       	rjmp	.-100    	; 0x778 <main+0x4a>

000007dc <_exit>:
 7dc:	f8 94       	cli

000007de <__stop_program>:
 7de:	ff cf       	rjmp	.-2      	; 0x7de <__stop_program>
