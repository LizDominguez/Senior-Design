
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ee  00800100  00800100  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000950  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002d0  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051c  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025f  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e1       	ldi	r30, 0x18	; 24
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	24 e0       	ldi	r18, 0x04	; 4
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 3e       	cpi	r26, 0xEE	; 238
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  b2:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
	{
		dac_write(arr[i]);
		frequency(value);
	}
}
  ba:	10 98       	cbi	0x02, 0	; 2
  bc:	88 23       	and	r24, r24
  be:	0c f4       	brge	.+2      	; 0xc2 <lcd_write+0x8>
  c0:	10 9a       	sbi	0x02, 0	; 2
  c2:	11 98       	cbi	0x02, 1	; 2
  c4:	86 fd       	sbrc	r24, 6
  c6:	11 9a       	sbi	0x02, 1	; 2
  c8:	12 98       	cbi	0x02, 2	; 2
  ca:	85 fd       	sbrc	r24, 5
  cc:	12 9a       	sbi	0x02, 2	; 2
  ce:	13 98       	cbi	0x02, 3	; 2
  d0:	84 fd       	sbrc	r24, 4
  d2:	13 9a       	sbi	0x02, 3	; 2
  d4:	14 9a       	sbi	0x02, 4	; 2
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_write+0x1e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_write+0x24>
  de:	14 98       	cbi	0x02, 4	; 2
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write+0x2e>
  e8:	08 95       	ret

000000ea <lcd_instruction>:
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
  ee:	15 98       	cbi	0x02, 5	; 2
  f0:	14 98       	cbi	0x02, 4	; 2
  f2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
  f6:	8a e1       	ldi	r24, 0x1A	; 26
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_instruction+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_instruction+0x14>
  fe:	8c 2f       	mov	r24, r28
 100:	82 95       	swap	r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	97 e2       	ldi	r25, 0x27	; 39
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_instruction+0x22>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_instruction+0x28>
 112:	00 00       	nop
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_init>:
 118:	81 b1       	in	r24, 0x01	; 1
 11a:	8f 63       	ori	r24, 0x3F	; 63
 11c:	81 b9       	out	0x01, r24	; 1
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <lcd_init+0xc>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x16>
 12e:	00 00       	nop
 130:	15 98       	cbi	0x02, 5	; 2
 132:	14 98       	cbi	0x02, 4	; 2
 134:	80 e3       	ldi	r24, 0x30	; 48
 136:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 13a:	8f e7       	ldi	r24, 0x7F	; 127
 13c:	9e e3       	ldi	r25, 0x3E	; 62
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x26>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x2c>
 144:	00 00       	nop
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 14c:	8f e8       	ldi	r24, 0x8F	; 143
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x38>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x3e>
 156:	00 00       	nop
 158:	80 e3       	ldi	r24, 0x30	; 48
 15a:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 15e:	8f e8       	ldi	r24, 0x8F	; 143
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x4a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x50>
 168:	00 00       	nop
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 170:	95 e8       	ldi	r25, 0x85	; 133
 172:	9a 95       	dec	r25
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x5a>
 176:	00 00       	nop
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 75 00 	call	0xea	; 0xea <lcd_instruction>
 17e:	25 e8       	ldi	r18, 0x85	; 133
 180:	2a 95       	dec	r18
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_init+0x68>
 184:	00 00       	nop
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	0e 94 75 00 	call	0xea	; 0xea <lcd_instruction>
 18c:	85 e8       	ldi	r24, 0x85	; 133
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x76>
 192:	00 00       	nop
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 75 00 	call	0xea	; 0xea <lcd_instruction>
 19a:	8f e6       	ldi	r24, 0x6F	; 111
 19c:	97 e1       	ldi	r25, 0x17	; 23
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x86>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x8c>
 1a4:	00 00       	nop
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	0e 94 75 00 	call	0xea	; 0xea <lcd_instruction>
 1ac:	9a e6       	ldi	r25, 0x6A	; 106
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x96>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init+0x9c>
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	0e 94 75 00 	call	0xea	; 0xea <lcd_instruction>
 1ba:	25 e8       	ldi	r18, 0x85	; 133
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0xa4>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <USART_init>:
 1c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1c8:	83 e3       	ldi	r24, 0x33	; 51
 1ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1ce:	e1 ec       	ldi	r30, 0xC1	; 193
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	80 83       	st	Z, r24
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1dc:	80 81       	ld	r24, Z
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 83       	st	Z, r24
 1e2:	08 95       	ret

000001e4 <frequency_init>:

/***************************************************************** 125kHz wave **********************************************************/
void frequency_init(void) {
	DDRD |= (1 << PORTD7);
 1e4:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A |= (1<<WGM20 | 1<<WGM21 | 1<<COM2A0);
 1e6:	e0 eb       	ldi	r30, 0xB0	; 176
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	83 64       	ori	r24, 0x43	; 67
 1ee:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22 | 1<<CS20); //Fast PWM
 1f0:	e1 eb       	ldi	r30, 0xB1	; 177
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	89 60       	ori	r24, 0x09	; 9
 1f8:	80 83       	st	Z, r24
	OCR2A = 31;		// 8000000/64 = 125k, but it's half with 50% duty cycle. 31 was value with least percent error at 126.6 kHz
 1fa:	8f e1       	ldi	r24, 0x1F	; 31
 1fc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 200:	08 95       	ret

00000202 <interr_init>:
	int tag;
}RFID;


void interr_init(void) {
	DDRD &= ~(1 << PIND2);		//Receiver input
 202:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 1 << PIND2;		// pull up resistor
 204:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK = 1 << INT0;			//enable interrupt 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	8d bb       	out	0x1d, r24	; 29
	EIFR = 1 << INTF0;			//clear flag
 20a:	8c bb       	out	0x1c, r24	; 28
	MCUCR = 1 << ISC00;			//trigger on any edge
 20c:	85 bf       	out	0x35, r24	; 53
 20e:	08 95       	ret

00000210 <__vector_1>:
	
}

ISR(INT0_vect) {
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8b eb       	ldi	r24, 0xBB	; 187
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <__vector_1+0x1a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <__vector_1+0x20>
 230:	00 00       	nop
	
	_delay_us(350);
	RFID.buff[i] = ((PIND & 0x04)>>2);
 232:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <i>
 236:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <i+0x1>
 23a:	89 b1       	in	r24, 0x09	; 9
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	ec 5f       	subi	r30, 0xFC	; 252
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	82 fb       	bst	r24, 2
 246:	88 27       	eor	r24, r24
 248:	80 f9       	bld	r24, 0
 24a:	80 83       	st	Z, r24
 24c:	11 82       	std	Z+1, r1	; 0x01
	
	if (RFID.buff[i] == 1) {	
 24e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <i>
 252:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <i+0x1>
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	ec 5f       	subi	r30, 0xFC	; 252
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 81       	ld	r24, Z
 260:	91 81       	ldd	r25, Z+1	; 0x01
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	a9 f4       	brne	.+42     	; 0x290 <__vector_1+0x80>
		count += RFID.buff[i];
 266:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <i>
 26a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <i+0x1>
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ec 5f       	subi	r30, 0xFC	; 252
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 27a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 28e:	04 c0       	rjmp	.+8      	; 0x298 <__vector_1+0x88>
	}
	
	else count = 0;
 290:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 294:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
		
	if(i < 499) i++;
 298:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 29c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 2a0:	83 3f       	cpi	r24, 0xF3	; 243
 2a2:	91 40       	sbci	r25, 0x01	; 1
 2a4:	54 f4       	brge	.+20     	; 0x2ba <__vector_1+0xaa>
 2a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 2aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i+0x1>
 2b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i>
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <__vector_1+0xb2>
	else i = 0;
 2ba:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 2be:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
	
	EIFR = 1 << INTF0; //clear flag
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	8c bb       	out	0x1c, r24	; 28
	
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:

int main( void )
{

	 
	lcd_init();
 2dc:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_init>
	USART_init();
 2e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_init>
	frequency_init();
 2e4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <frequency_init>
	interr_init();
 2e8:	0e 94 01 01 	call	0x202	; 0x202 <interr_init>
volatile uint32_t adcVal = 0;
volatile uint32_t freq = 1;

void inline SPI_init()
{
	DDRB |= (1<<PORTB5 | 1<<PORTB7 | 1<<PORTB4); 	// initializing ss, sck, and mosi pins
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	80 6b       	ori	r24, 0xB0	; 176
 2f0:	84 b9       	out	0x04, r24	; 4
	SPSR |= 1<<SPI2X;
 2f2:	8d b5       	in	r24, 0x2d	; 45
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1<<SPE | 1<<MSTR); 			//enabling master mode, frequency 2 mhz
 2f8:	8c b5       	in	r24, 0x2c	; 44
 2fa:	80 65       	ori	r24, 0x50	; 80
 2fc:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; 					//ss high
 2fe:	2c 9a       	sbi	0x05, 4	; 5
	frequency_init();
	interr_init();
	SPI_init();

	
	sei();
 300:	78 94       	sei
	
	while (1) {
		
		if(i == 499){
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 306:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 30a:	83 3f       	cpi	r24, 0xF3	; 243
 30c:	91 40       	sbci	r25, 0x01	; 1
 30e:	c9 f7       	brne	.-14     	; 0x302 <main+0x26>
			cli();
 310:	f8 94       	cli
 312:	f7 cf       	rjmp	.-18     	; 0x302 <main+0x26>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
