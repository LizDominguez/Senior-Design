
RFReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000612  000006a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000612  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a3  00800176  00800176  0000071c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000caf  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000331  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000703  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e7  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000664  00000000  00000000  000023c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_1>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e1       	ldi	r30, 0x12	; 18
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 37       	cpi	r26, 0x76	; 118
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	a6 e7       	ldi	r26, 0x76	; 118
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 31       	cpi	r26, 0x19	; 25
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 af 02 	call	0x55e	; 0x55e <main>
  b2:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write>:
}


void lcd_write(uint8_t byte)
{
	lcdPort &= ~(1 << lcdD7Bit);                        // assume that data is '0'
  ba:	10 98       	cbi	0x02, 0	; 2
	if (byte & 1 << 7) lcdPort |= (1 << lcdD7Bit);     // make data = '1' if necessary
  bc:	88 23       	and	r24, r24
  be:	0c f4       	brge	.+2      	; 0xc2 <lcd_write+0x8>
  c0:	10 9a       	sbi	0x02, 0	; 2

	lcdPort &= ~(1 << lcdD6Bit);                        // repeat for each data bit
  c2:	11 98       	cbi	0x02, 1	; 2
	if (byte & 1 << 6) lcdPort |= (1 << lcdD6Bit);
  c4:	86 fd       	sbrc	r24, 6
  c6:	11 9a       	sbi	0x02, 1	; 2

	lcdPort &= ~(1 << lcdD5Bit);
  c8:	12 98       	cbi	0x02, 2	; 2
	if (byte & 1 << 5) lcdPort |= (1 << lcdD5Bit);
  ca:	85 fd       	sbrc	r24, 5
  cc:	12 9a       	sbi	0x02, 2	; 2

	lcdPort &= ~(1 << lcdD4Bit);
  ce:	13 98       	cbi	0x02, 3	; 2
	if (byte & 1 << 4) lcdPort |= (1 << lcdD4Bit);
  d0:	84 fd       	sbrc	r24, 4
  d2:	13 9a       	sbi	0x02, 3	; 2

	// write the data
	
	lcdPort |= (1 << lcdEBit);                   // E high
  d4:	14 9a       	sbi	0x02, 4	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_write+0x1e>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_write+0x24>
	_delay_us(1);                               // data setup
	lcdPort &= ~(1 << lcdEBit);                // E low
  de:	14 98       	cbi	0x02, 4	; 2
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write+0x28>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write+0x2e>
  e8:	08 95       	ret

000000ea <lcd_char>:
}



void lcd_char(uint8_t data)
{
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
	lcdPort |= (1 << lcdRSBit);                 // RS high
  ee:	15 9a       	sbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                // E low
  f0:	14 98       	cbi	0x02, 4	; 2
	lcd_write(data);                          // write the upper four bits of data
  f2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	lcd_write(data << 4);                    // write the lower 4 bits of data
  f6:	8c 2f       	mov	r24, r28
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_string>:
	_delay_us(50);               // same delay as off
}


void lcd_string(uint8_t string[])
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 10a:	88 81       	ld	r24, Y
 10c:	88 23       	and	r24, r24
 10e:	51 f0       	breq	.+20     	; 0x124 <lcd_string+0x20>
 110:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_char(string[i]);
 112:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 116:	85 e8       	ldi	r24, 0x85	; 133
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_string+0x14>
 11c:	00 00       	nop


void lcd_string(uint8_t string[])
{
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	f7 cf       	rjmp	.-18     	; 0x112 <lcd_string+0xe>
	{
		lcd_char(string[i]);
		i++;
		_delay_us(50);                              //40 us delay min
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_instruction>:
	lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
		lcdPort &= ~(1 << lcdRSBit);                // RS low
 12e:	15 98       	cbi	0x02, 5	; 2
		lcdPort &= ~(1 << lcdEBit);                // E low
 130:	14 98       	cbi	0x02, 4	; 2
		lcd_write(instruction);                   // write the upper 4 bits of data
 132:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 136:	8a e1       	ldi	r24, 0x1A	; 26
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_instruction+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_instruction+0x14>
		_delay_us(10);
		lcd_write(instruction << 4);             // write the lower 4 bits of data
 13e:	8c 2f       	mov	r24, r28
 140:	82 95       	swap	r24
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_instruction+0x22>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_instruction+0x28>
 152:	00 00       	nop
		_delay_ms(5);
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_init>:
void lcd_init(void);


void lcd_init(void)
{
	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	8f 63       	ori	r24, 0x3F	; 63
 15c:	81 b9       	out	0x01, r24	; 1
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <lcd_init+0xc>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x16>
 16e:	00 00       	nop
	_delay_ms(100);

	lcdPort &= ~(1 << lcdRSBit);                 // RS low
 170:	15 98       	cbi	0x02, 5	; 2
	lcdPort &= ~(1 << lcdEBit);                 // E low
 172:	14 98       	cbi	0x02, 4	; 2

	// LCD resets
	lcd_write(reset);
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	9e e3       	ldi	r25, 0x3E	; 62
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x2c>
 184:	00 00       	nop
	_delay_ms(8);                           // 5 ms delay min

	lcd_write(reset);
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e8       	ldi	r24, 0x8F	; 143
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_init+0x3e>
 196:	00 00       	nop
	_delay_us(200);                       // 100 us delay min

	lcd_write(reset);
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x4a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x50>
 1a8:	00 00       	nop
	_delay_us(200);
	
	lcd_write(bit4Mode);               	//set to 4 bit mode
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write>
 1b0:	95 e8       	ldi	r25, 0x85	; 133
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x5a>
 1b6:	00 00       	nop
	_delay_us(50);                     // 40us delay min

	lcd_instruction(bit4Mode);   	 // set 4 bit mode
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1be:	25 e8       	ldi	r18, 0x85	; 133
 1c0:	2a 95       	dec	r18
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x68>
 1c4:	00 00       	nop
	_delay_us(50);                  // 40 us delay min

	// display off
	lcd_instruction(off);        	// turn off display
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x76>
 1d2:	00 00       	nop
	_delay_us(50);

	// Clear display
	lcd_instruction(clear);              // clear display
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e6       	ldi	r24, 0x6F	; 111
 1dc:	97 e1       	ldi	r25, 0x17	; 23
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x86>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x8c>
 1e4:	00 00       	nop
	_delay_ms(3);                       // 1.64 ms delay min

	// entry mode
	lcd_instruction(entryMode);          // this instruction shifts the cursor
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	9a e6       	ldi	r25, 0x6A	; 106
 1ee:	9a 95       	dec	r25
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x96>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x9c>
	_delay_us(40);                      // 40 us delay min

	// Display on
	lcd_instruction(on);          // turn on the display
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 1fa:	25 e8       	ldi	r18, 0x85	; 133
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0xa4>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <USART_init>:
/*********************************************************** USART Configuration *****************************************************************/

void USART_init(void)
{
	/*Set baud rate */
	UBRR0H = (BAUDRATE>>8);
 204:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUDRATE;
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	80 83       	st	Z, r24

	/* Set frame format: 8data, 1stop bit, no parity */
	UCSR0C = (3<<UCSZ00);
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	/* Enable interrupt */
	UCSR0B |= (1 << RXCIE0);
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <USART_send>:
}

void USART_send(unsigned char data)
{
	/* Wait for data to be received */
	while (!( UCSR0A & (1<<UDRE0)));
 224:	e0 ec       	ldi	r30, 0xC0	; 192
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	95 ff       	sbrs	r25, 5
 22c:	fd cf       	rjmp	.-6      	; 0x228 <USART_send+0x4>
	UDR0 = data;
 22e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 232:	08 95       	ret

00000234 <dac_write>:
	PORTB |= 1<<PORTB4; 					//ss high
}

void dac_write(uint16_t val)
{
	PORTB &= ~(1<<PORTB4); 		//turn off ss
 234:	2c 98       	cbi	0x05, 4	; 5

	val = val << 2;
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
	val |= (0b1001 << 12);
 23e:	90 69       	ori	r25, 0x90	; 144

	SPDR = val >> 8; 		//upper bytes
 240:	9e bd       	out	0x2e, r25	; 46

	while(!(SPSR & 1<<SPIF)); //wait til upper bytes done
 242:	0d b4       	in	r0, 0x2d	; 45
 244:	07 fe       	sbrs	r0, 7
 246:	fd cf       	rjmp	.-6      	; 0x242 <dac_write+0xe>

	SPDR = (0xFF & val); 		//lower bytes
 248:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & 1<<SPIF)); //wait til lower bytes done
 24a:	0d b4       	in	r0, 0x2d	; 45
 24c:	07 fe       	sbrs	r0, 7
 24e:	fd cf       	rjmp	.-6      	; 0x24a <dac_write+0x16>

	PORTB |= 1<<PORTB4; 	//turn on ss
 250:	2c 9a       	sbi	0x05, 4	; 5
 252:	08 95       	ret

00000254 <frequency>:
}

void frequency(uint32_t frequency)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <frequency+0x6>
 25a:	00 d0       	rcall	.+0      	; 0x25c <frequency+0x8>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	
	if (frequency == 0) {
 260:	61 15       	cp	r22, r1
 262:	71 05       	cpc	r23, r1
 264:	81 05       	cpc	r24, r1
 266:	91 05       	cpc	r25, r1
 268:	81 f4       	brne	.+32     	; 0x28a <frequency+0x36>
		for(volatile uint16_t i = 0; i < 1; i++);	//800 Hz
 26a:	1c 82       	std	Y+4, r1	; 0x04
 26c:	1b 82       	std	Y+3, r1	; 0x03
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	9c 81       	ldd	r25, Y+4	; 0x04
 272:	89 2b       	or	r24, r25
 274:	f1 f4       	brne	.+60     	; 0x2b2 <frequency+0x5e>
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	9c 81       	ldd	r25, Y+4	; 0x04
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9c 83       	std	Y+4, r25	; 0x04
 27e:	8b 83       	std	Y+3, r24	; 0x03
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	9c 81       	ldd	r25, Y+4	; 0x04
 284:	89 2b       	or	r24, r25
 286:	b9 f3       	breq	.-18     	; 0x276 <frequency+0x22>
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <frequency+0x5e>
	}
	
	else if (frequency == 1) {
 28a:	61 30       	cpi	r22, 0x01	; 1
 28c:	71 05       	cpc	r23, r1
 28e:	81 05       	cpc	r24, r1
 290:	91 05       	cpc	r25, r1
 292:	79 f4       	brne	.+30     	; 0x2b2 <frequency+0x5e>
		for(volatile uint16_t i = 0; i < 2; i++);	//1 kHz
 294:	1a 82       	std	Y+2, r1	; 0x02
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	02 97       	sbiw	r24, 0x02	; 2
 29e:	48 f4       	brcc	.+18     	; 0x2b2 <frequency+0x5e>
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	9a 81       	ldd	r25, Y+2	; 0x02
 2ae:	02 97       	sbiw	r24, 0x02	; 2
 2b0:	b8 f3       	brcs	.-18     	; 0x2a0 <frequency+0x4c>
	}
		

}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <output_waveform>:

void output_waveform(uint32_t value, uint16_t arr[])
{
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	6b 01       	movw	r12, r22
 2d2:	7c 01       	movw	r14, r24
 2d4:	ea 01       	movw	r28, r20
 2d6:	8a 01       	movw	r16, r20
 2d8:	0c 59       	subi	r16, 0x9C	; 156
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
	{
		dac_write(arr[i]);
 2dc:	89 91       	ld	r24, Y+
 2de:	99 91       	ld	r25, Y+
 2e0:	0e 94 1a 01 	call	0x234	; 0x234 <dac_write>
		frequency(value);
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 2a 01 	call	0x254	; 0x254 <frequency>

}

void output_waveform(uint32_t value, uint16_t arr[])
{
	for (int i = 0; i < 50; i++)		//iterating through wave lookup table
 2ec:	c0 17       	cp	r28, r16
 2ee:	d1 07       	cpc	r29, r17
 2f0:	a9 f7       	brne	.-22     	; 0x2dc <output_waveform+0x1c>
	{
		dac_write(arr[i]);
		frequency(value);
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <beep>:

void beep(void) {
 304:	cf 93       	push	r28
 306:	c6 e9       	ldi	r28, 0x96	; 150
	
	for(uint8_t i = 0; i < 150; i++) {
		output_waveform(freq, (uint16_t *)sine);
 308:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 30c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 310:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 314:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 318:	44 e0       	ldi	r20, 0x04	; 4
 31a:	51 e0       	ldi	r21, 0x01	; 1
 31c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <output_waveform>
 320:	c1 50       	subi	r28, 0x01	; 1
	}
}

void beep(void) {
	
	for(uint8_t i = 0; i < 150; i++) {
 322:	91 f7       	brne	.-28     	; 0x308 <beep+0x4>
		output_waveform(freq, (uint16_t *)sine);
	}
}
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <frequency_init>:

/***************************************************************** 125kHz wave **********************************************************/
void frequency_init(void) {
	DDRD |= (1 << PORTD7);
 328:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A |= (1<<WGM20 | 1<<WGM21 | 1<<COM2A0);
 32a:	e0 eb       	ldi	r30, 0xB0	; 176
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	83 64       	ori	r24, 0x43	; 67
 332:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22 | 1<<CS20); //Fast PWM
 334:	e1 eb       	ldi	r30, 0xB1	; 177
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	89 60       	ori	r24, 0x09	; 9
 33c:	80 83       	st	Z, r24
	OCR2A = 31;		// 8000000/64 = 125k, but it's half with 50% duty cycle. 31 was value with least percent error at 126.6 kHz
 33e:	8f e1       	ldi	r24, 0x1F	; 31
 340:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 344:	08 95       	ret

00000346 <interr_init>:
char card2[] = {0x33, 0x31, 0x30, 0x30, 0x33, 0x37, 0x44, 0x39, 0x33, 0x44};
char card3[] = {0x36, 0x46, 0x30, 0x30, 0x35, 0x43, 0x41, 0x44, 0x36, 0x30};


void interr_init(void) {
	DDRD &= ~(1 << PIND2);		//Receiver input
 346:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 1 << PIND2;		// pull up resistor
 348:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK = 1 << INT0;			//enable interrupt 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	8d bb       	out	0x1d, r24	; 29
	EIFR = 1 << INTF0;			//clear flag
 34e:	8c bb       	out	0x1c, r24	; 28
	MCUCR = 1 << ISC00;			//trigger on any edge
 350:	85 bf       	out	0x35, r24	; 53
 352:	08 95       	ret

00000354 <__vector_1>:
	
}

ISR(INT0_vect) {
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
 368:	8b eb       	ldi	r24, 0xBB	; 187
 36a:	92 e0       	ldi	r25, 0x02	; 2
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <__vector_1+0x18>
 370:	00 c0       	rjmp	.+0      	; 0x372 <__vector_1+0x1e>
 372:	00 00       	nop

	_delay_us(350);
	
	RFID.data[z] = ((PIND & 0x04)>>2);
 374:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <z>
 378:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <z+0x1>
 37c:	89 b1       	in	r24, 0x09	; 9
 37e:	ea 58       	subi	r30, 0x8A	; 138
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	82 fb       	bst	r24, 2
 384:	88 27       	eor	r24, r24
 386:	80 f9       	bld	r24, 0
 388:	80 83       	st	Z, r24
	
	if (RFID.data[z] == 1) {
 38a:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <z>
 38e:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <z+0x1>
 392:	ea 58       	subi	r30, 0x8A	; 138
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	80 81       	ld	r24, Z
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	a9 f5       	brne	.+106    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		
		count++;
 39c:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <count>
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <count>

		if(count == 9 && RFID.ready == false) {		//wait until 9 consecutive 1s
 3a6:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <count>
 3aa:	89 30       	cpi	r24, 0x09	; 9
 3ac:	71 f5       	brne	.+92     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3ae:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end+0x194>
 3b2:	81 11       	cpse	r24, r1
 3b4:	2a c0       	rjmp	.+84     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
				
			if(second == 1)	{
 3b6:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <second>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	51 f4       	brne	.+20     	; 0x3d2 <__vector_1+0x7e>
				RFID.index = z+1;
 3be:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <z>
 3c2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <z+0x1>
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x191>
 3cc:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end+0x190>
 3d0:	14 c0       	rjmp	.+40     	; 0x3fa <__vector_1+0xa6>
			}
			
			else if (second == 2)
 3d2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <second>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	81 f4       	brne	.+32     	; 0x3fa <__vector_1+0xa6>
			{
				RFID.index2 = z+1;
 3da:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <z>
 3de:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <z+0x1>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x193>
 3e8:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end+0x192>
				RFID.ready = true;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <__data_end+0x194>
				count = 0;
 3f2:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <count>
				second = 0;
 3f6:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <second>
			}
			
			second++;
 3fa:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <second>
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <second>
 404:	02 c0       	rjmp	.+4      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
		}
		
	}
	
	else count = 0;	
 406:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <count>
	
	if (z < 399) z++;
 40a:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <z>
 40e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <z+0x1>
 412:	8f 38       	cpi	r24, 0x8F	; 143
 414:	91 40       	sbci	r25, 0x01	; 1
 416:	50 f4       	brcc	.+20     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 418:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <z>
 41c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <z+0x1>
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <z+0x1>
 426:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <z>
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
	else z = 0; 
 42c:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <z+0x1>
 430:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <z>
	
	
						
	EIFR = 1 << INTF0;		//clear flag
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	8c bb       	out	0x1c, r24	; 28
	
}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <manchester_decode>:


bool manchester_decode(void) {
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 d0       	rcall	.+0      	; 0x45c <manchester_decode+0x10>
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
	
	if (z == 398){
 460:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <z>
 464:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <z+0x1>
 468:	8e 38       	cpi	r24, 0x8E	; 142
 46a:	91 40       	sbci	r25, 0x01	; 1
 46c:	09 f0       	breq	.+2      	; 0x470 <manchester_decode+0x24>
 46e:	66 c0       	rjmp	.+204    	; 0x53c <manchester_decode+0xf0>
		cli();
 470:	f8 94       	cli
 472:	0f 2e       	mov	r0, r31
 474:	fb e0       	ldi	r31, 0x0B	; 11
 476:	cf 2e       	mov	r12, r31
 478:	f3 e0       	ldi	r31, 0x03	; 3
 47a:	df 2e       	mov	r13, r31
 47c:	f0 2d       	mov	r31, r0
 47e:	45 e1       	ldi	r20, 0x15	; 21
 480:	53 e0       	ldi	r21, 0x03	; 3
		 int8_t col_parity[4] = {0}; 
		 for (int8_t i = 0; i < 10; i++) {  //10 parity bits = 50 total iterations 
			 
			 volatile int8_t rfid_char = 0, row_parity = 0;
 482:	0f 2e       	mov	r0, r31
 484:	f3 e0       	ldi	r31, 0x03	; 3
 486:	ff 2e       	mov	r15, r31
 488:	f0 2d       	mov	r31, r0
 48a:	00 e0       	ldi	r16, 0x00	; 0
			 
			 for (int8_t j = 3; j >= 0; j--) {		
				 int8_t decoded_bit = RFID.data[RFID.index]; //save each bit
 48c:	e6 e0       	ldi	r30, 0x06	; 6
 48e:	f3 e0       	ldi	r31, 0x03	; 3
	if (z == 398){
		cli();
		 int8_t col_parity[4] = {0}; 
		 for (int8_t i = 0; i < 10; i++) {  //10 parity bits = 50 total iterations 
			 
			 volatile int8_t rfid_char = 0, row_parity = 0;
 490:	1a 82       	std	Y+2, r1	; 0x02
 492:	19 82       	std	Y+1, r1	; 0x01
 494:	2f 2d       	mov	r18, r15
 496:	30 2f       	mov	r19, r16
			 
			 for (int8_t j = 3; j >= 0; j--) {		
				 int8_t decoded_bit = RFID.data[RFID.index]; //save each bit
 498:	60 81       	ld	r22, Z
 49a:	71 81       	ldd	r23, Z+1	; 0x01
				 rfid_char += decoded_bit << j;				//shift 4 times to create 8 bit int
 49c:	1a 81       	ldd	r17, Y+2	; 0x02
		 for (int8_t i = 0; i < 10; i++) {  //10 parity bits = 50 total iterations 
			 
			 volatile int8_t rfid_char = 0, row_parity = 0;
			 
			 for (int8_t j = 3; j >= 0; j--) {		
				 int8_t decoded_bit = RFID.data[RFID.index]; //save each bit
 49e:	6a 58       	subi	r22, 0x8A	; 138
 4a0:	7e 4f       	sbci	r23, 0xFE	; 254
				 rfid_char += decoded_bit << j;				//shift 4 times to create 8 bit int
 4a2:	db 01       	movw	r26, r22
 4a4:	8c 91       	ld	r24, X
 4a6:	08 2e       	mov	r0, r24
 4a8:	00 0c       	add	r0, r0
 4aa:	99 0b       	sbc	r25, r25
 4ac:	02 2e       	mov	r0, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <manchester_decode+0x68>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <manchester_decode+0x64>
 4b8:	81 0f       	add	r24, r17
 4ba:	8a 83       	std	Y+2, r24	; 0x02
				 RFID.index++;								//increment the index 4 times
 4bc:	80 81       	ld	r24, Z
 4be:	91 81       	ldd	r25, Z+1	; 0x01
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	80 83       	st	Z, r24
 4c6:	21 50       	subi	r18, 0x01	; 1
 4c8:	31 09       	sbc	r19, r1
 4ca:	30 f7       	brcc	.-52     	; 0x498 <manchester_decode+0x4c>
			 }
			 
			 RFID.buff[i] = rfid_char;			//save each character
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	d6 01       	movw	r26, r12
 4d0:	8d 93       	st	X+, r24
 4d2:	6d 01       	movw	r12, r26
			 RFID.index++;							//increment the index to the parity bit (5x)
 4d4:	80 81       	ld	r24, Z
 4d6:	91 81       	ldd	r25, Z+1	; 0x01
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	91 83       	std	Z+1, r25	; 0x01
 4dc:	80 83       	st	Z, r24
			 row_parity += RFID.data[RFID.index];	//save the row parity bit
 4de:	20 81       	ld	r18, Z
 4e0:	31 81       	ldd	r19, Z+1	; 0x01
 4e2:	99 81       	ldd	r25, Y+1	; 0x01
 4e4:	2a 58       	subi	r18, 0x8A	; 138
 4e6:	3e 4f       	sbci	r19, 0xFE	; 254
 4e8:	d9 01       	movw	r26, r18
 4ea:	8c 91       	ld	r24, X
 4ec:	89 0f       	add	r24, r25
 4ee:	89 83       	std	Y+1, r24	; 0x01
bool manchester_decode(void) {
	
	if (z == 398){
		cli();
		 int8_t col_parity[4] = {0}; 
		 for (int8_t i = 0; i < 10; i++) {  //10 parity bits = 50 total iterations 
 4f0:	c4 16       	cp	r12, r20
 4f2:	d5 06       	cpc	r13, r21
 4f4:	69 f6       	brne	.-102    	; 0x490 <manchester_decode+0x44>
 4f6:	24 e0       	ldi	r18, 0x04	; 4
			 RFID.index++;							//increment the index to the parity bit (5x)
			 row_parity += RFID.data[RFID.index];	//save the row parity bit
		 }
		 
		 for (int8_t i = 3; i >= 0; i--) {	//final 4 parity bits
			 col_parity[i] += RFID.data[RFID.index];
 4f8:	e6 e0       	ldi	r30, 0x06	; 6
 4fa:	f3 e0       	ldi	r31, 0x03	; 3
 4fc:	80 81       	ld	r24, Z
 4fe:	91 81       	ldd	r25, Z+1	; 0x01
			 RFID.index++;
 500:	80 81       	ld	r24, Z
 502:	91 81       	ldd	r25, Z+1	; 0x01
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	80 83       	st	Z, r24
 50a:	21 50       	subi	r18, 0x01	; 1
			 RFID.buff[i] = rfid_char;			//save each character
			 RFID.index++;							//increment the index to the parity bit (5x)
			 row_parity += RFID.data[RFID.index];	//save the row parity bit
		 }
		 
		 for (int8_t i = 3; i >= 0; i--) {	//final 4 parity bits
 50c:	b9 f7       	brne	.-18     	; 0x4fc <manchester_decode+0xb0>
			 col_parity[i] += RFID.data[RFID.index];
			 RFID.index++;
		 }
		 
		 int8_t stop_bit = RFID.data[RFID.index];
 50e:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <__data_end+0x190>
 512:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <__data_end+0x191>
 516:	ea 58       	subi	r30, 0x8A	; 138
 518:	fe 4f       	sbci	r31, 0xFE	; 254
		 if (stop_bit != 0){ 
 51a:	80 81       	ld	r24, Z
 51c:	88 23       	and	r24, r24
 51e:	51 f0       	breq	.+20     	; 0x534 <manchester_decode+0xe8>
			 RFID.index = RFID.index2;
 520:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end+0x192>
 524:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x193>
 528:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x191>
 52c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end+0x190>
			 return false;
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	05 c0       	rjmp	.+10     	; 0x53e <manchester_decode+0xf2>
			 }
			RFID.ready = false;
 534:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <__data_end+0x194>
			return true;		
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	01 c0       	rjmp	.+2      	; 0x53e <manchester_decode+0xf2>
	 }
	 return false;
 53c:	80 e0       	ldi	r24, 0x00	; 0
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <formatHex>:

char formatHex(int8_t i) {
	if ( 0 <= i && i <= 9){
 552:	8a 30       	cpi	r24, 0x0A	; 10
 554:	10 f4       	brcc	.+4      	; 0x55a <formatHex+0x8>
		return i + '0';
 556:	80 5d       	subi	r24, 0xD0	; 208
 558:	08 95       	ret
		} else {
		return (i - 10) + 'A';
 55a:	89 5c       	subi	r24, 0xC9	; 201
	}
}
 55c:	08 95       	ret

0000055e <main>:

int main( void )
{
 
	lcd_init();
 55e:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	USART_init();
 562:	0e 94 02 01 	call	0x204	; 0x204 <USART_init>
	frequency_init();
 566:	0e 94 94 01 	call	0x328	; 0x328 <frequency_init>
	interr_init();
 56a:	0e 94 a3 01 	call	0x346	; 0x346 <interr_init>
volatile uint32_t adcVal = 0;
volatile uint32_t freq = 1;

void inline SPI_init()
{
	DDRB |= (1<<PORTB5 | 1<<PORTB7 | 1<<PORTB4); 	// initializing ss, sck, and mosi pins
 56e:	84 b1       	in	r24, 0x04	; 4
 570:	80 6b       	ori	r24, 0xB0	; 176
 572:	84 b9       	out	0x04, r24	; 4
	SPSR |= 1<<SPI2X;
 574:	8d b5       	in	r24, 0x2d	; 45
 576:	81 60       	ori	r24, 0x01	; 1
 578:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1<<SPE | 1<<MSTR); 			//enabling master mode, frequency 2 mhz
 57a:	8c b5       	in	r24, 0x2c	; 44
 57c:	80 65       	ori	r24, 0x50	; 80
 57e:	8c bd       	out	0x2c, r24	; 44
	PORTB |= 1<<PORTB4; 					//ss high
 580:	2c 9a       	sbi	0x05, 4	; 5
	USART_init();
	frequency_init();
	interr_init();
	SPI_init();
	
	lcd_instruction(clear);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
	lcd_string((uint8_t *)"Ready to Scan");
 588:	88 e6       	ldi	r24, 0x68	; 104
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 82 00 	call	0x104	; 0x104 <lcd_string>

	sei();
 590:	78 94       	sei
 592:	0f 2e       	mov	r0, r31
 594:	fb e0       	ldi	r31, 0x0B	; 11
 596:	cf 2e       	mov	r12, r31
 598:	f3 e0       	ldi	r31, 0x03	; 3
 59a:	df 2e       	mov	r13, r31
 59c:	f0 2d       	mov	r31, r0
 59e:	0f 2e       	mov	r0, r31
 5a0:	f5 e1       	ldi	r31, 0x15	; 21
 5a2:	ef 2e       	mov	r14, r31
 5a4:	f3 e0       	ldi	r31, 0x03	; 3
 5a6:	ff 2e       	mov	r15, r31
 5a8:	f0 2d       	mov	r31, r0
	
	while (1) {	
		
		if(!manchester_decode()) continue;
 5aa:	0e 94 26 02 	call	0x44c	; 0x44c <manchester_decode>
 5ae:	88 23       	and	r24, r24
 5b0:	e1 f3       	breq	.-8      	; 0x5aa <main+0x4c>
		lcd_instruction(clear);
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_instruction>
 5b8:	e6 01       	movw	r28, r12
 5ba:	86 01       	movw	r16, r12
		
		for (int i = 0; i < 10; i++) {
			lcd_char(formatHex(RFID.buff[i]));
 5bc:	f8 01       	movw	r30, r16
 5be:	81 91       	ld	r24, Z+
 5c0:	8f 01       	movw	r16, r30
 5c2:	0e 94 a9 02 	call	0x552	; 0x552 <formatHex>
 5c6:	0e 94 75 00 	call	0xea	; 0xea <lcd_char>
 5ca:	f5 e8       	ldi	r31, 0x85	; 133
 5cc:	fa 95       	dec	r31
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <main+0x6e>
 5d0:	00 00       	nop
	while (1) {	
		
		if(!manchester_decode()) continue;
		lcd_instruction(clear);
		
		for (int i = 0; i < 10; i++) {
 5d2:	0e 15       	cp	r16, r14
 5d4:	1f 05       	cpc	r17, r15
 5d6:	91 f7       	brne	.-28     	; 0x5bc <main+0x5e>
			lcd_char(formatHex(RFID.buff[i]));
			_delay_us(50);
		}
		
		USART_send(0x0A);
 5d8:	8a e0       	ldi	r24, 0x0A	; 10
 5da:	0e 94 12 01 	call	0x224	; 0x224 <USART_send>
		for (int i = 0; i < 10; i++) {
			USART_send(formatHex(RFID.buff[i]));
 5de:	89 91       	ld	r24, Y+
 5e0:	0e 94 a9 02 	call	0x552	; 0x552 <formatHex>
 5e4:	0e 94 12 01 	call	0x224	; 0x224 <USART_send>
			lcd_char(formatHex(RFID.buff[i]));
			_delay_us(50);
		}
		
		USART_send(0x0A);
		for (int i = 0; i < 10; i++) {
 5e8:	ce 15       	cp	r28, r14
 5ea:	df 05       	cpc	r29, r15
 5ec:	c1 f7       	brne	.-16     	; 0x5de <main+0x80>
			USART_send(formatHex(RFID.buff[i]));
		}
		USART_send(0x0D);
 5ee:	8d e0       	ldi	r24, 0x0D	; 13
 5f0:	0e 94 12 01 	call	0x224	; 0x224 <USART_send>
		
		beep();
 5f4:	0e 94 82 01 	call	0x304	; 0x304 <beep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f8:	2f ef       	ldi	r18, 0xFF	; 255
 5fa:	8d e3       	ldi	r24, 0x3D	; 61
 5fc:	99 e4       	ldi	r25, 0x49	; 73
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0xa0>
 606:	00 c0       	rjmp	.+0      	; 0x608 <main+0xaa>
 608:	00 00       	nop
		_delay_ms(3000);
		sei();
 60a:	78 94       	sei
 60c:	ce cf       	rjmp	.-100    	; 0x5aa <main+0x4c>

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
