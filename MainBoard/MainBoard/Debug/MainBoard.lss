
MainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a7  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000242  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020a  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c6  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 12 01 	call	0x224	; 0x224 <main>
  74:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lcd_write>:
	{
		lcd_char(string[i]);
		i++;
		_delay_us(50);                              //40 us delay min
	}
}
  7c:	d8 98       	cbi	0x1b, 0	; 27
  7e:	88 23       	and	r24, r24
  80:	0c f4       	brge	.+2      	; 0x84 <lcd_write+0x8>
  82:	d8 9a       	sbi	0x1b, 0	; 27
  84:	d9 98       	cbi	0x1b, 1	; 27
  86:	86 fd       	sbrc	r24, 6
  88:	d9 9a       	sbi	0x1b, 1	; 27
  8a:	da 98       	cbi	0x1b, 2	; 27
  8c:	85 fd       	sbrc	r24, 5
  8e:	da 9a       	sbi	0x1b, 2	; 27
  90:	db 98       	cbi	0x1b, 3	; 27
  92:	84 fd       	sbrc	r24, 4
  94:	db 9a       	sbi	0x1b, 3	; 27
  96:	dc 9a       	sbi	0x1b, 4	; 27
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_write+0x1e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_write+0x24>
  a0:	dc 98       	cbi	0x1b, 4	; 27
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_write+0x28>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_write+0x2e>
  aa:	08 95       	ret

000000ac <lcd_char>:
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	dd 9a       	sbi	0x1b, 5	; 27
  b2:	dc 98       	cbi	0x1b, 4	; 27
  b4:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
  b8:	8c 2f       	mov	r24, r28
  ba:	82 95       	swap	r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <lcd_instruction>:
	lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
	lcdPort &= ~(1 << lcdRSBit);                // RS low
  ca:	dd 98       	cbi	0x1b, 5	; 27
	lcdPort &= ~(1 << lcdEBit);                // E low
  cc:	dc 98       	cbi	0x1b, 4	; 27
	lcd_write(instruction);                   // write the upper 4 bits of data
  ce:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
	lcd_write(instruction << 4);             // write the lower 4 bits of data
  d2:	8c 2f       	mov	r24, r28
  d4:	82 95       	swap	r24
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <lcd_init>:
void lcd_init(void);


void lcd_init(void)
{
	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
  e0:	8a b3       	in	r24, 0x1a	; 26
  e2:	8f 63       	ori	r24, 0x3F	; 63
  e4:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <lcd_init+0xc>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_init+0x16>
  f6:	00 00       	nop
	_delay_ms(100);

	lcdPort &= ~(1 << lcdRSBit);                 // RS low
  f8:	dd 98       	cbi	0x1b, 5	; 27
	lcdPort &= ~(1 << lcdEBit);                 // E low
  fa:	dc 98       	cbi	0x1b, 4	; 27

	// LCD resets
	lcd_write(reset);
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 102:	8f e7       	ldi	r24, 0x7F	; 127
 104:	9e e3       	ldi	r25, 0x3E	; 62
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_init+0x26>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_init+0x2c>
 10c:	00 00       	nop
	_delay_ms(8);                           // 5 ms delay min

	lcd_write(reset);
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e8       	ldi	r24, 0x8F	; 143
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init+0x38>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_init+0x3e>
 11e:	00 00       	nop
	_delay_us(200);                       // 100 us delay min

	lcd_write(reset);
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 126:	8f e8       	ldi	r24, 0x8F	; 143
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_init+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_init+0x50>
 130:	00 00       	nop
	_delay_us(200);
	
	lcd_write(bit4Mode);               	//set to 4 bit mode
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 138:	95 e8       	ldi	r25, 0x85	; 133
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x5a>
 13e:	00 00       	nop
	_delay_us(50);                     // 40us delay min

	lcd_instruction(bit4Mode);   	 // set 4 bit mode
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_instruction>
 146:	25 e8       	ldi	r18, 0x85	; 133
 148:	2a 95       	dec	r18
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x68>
 14c:	00 00       	nop
	_delay_us(50);                  // 40 us delay min

	// display off
	lcd_instruction(off);        	// turn off display
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_instruction>
 154:	85 e8       	ldi	r24, 0x85	; 133
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x76>
 15a:	00 00       	nop
	_delay_us(50);

	// Clear display
	lcd_instruction(clear);              // clear display
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	8f e6       	ldi	r24, 0x6F	; 111
 164:	97 e1       	ldi	r25, 0x17	; 23
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x86>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0x8c>
 16c:	00 00       	nop
	_delay_ms(3);                       // 1.64 ms delay min

	// entry mode
	lcd_instruction(entryMode);          // this instruction shifts the cursor
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	9a e6       	ldi	r25, 0x6A	; 106
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x96>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x9c>
	_delay_us(40);                      // 40 us delay min

	// Display on
	lcd_instruction(on);          // turn on the display
 17c:	8c e0       	ldi	r24, 0x0C	; 12
 17e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_instruction>
 182:	25 e8       	ldi	r18, 0x85	; 133
 184:	2a 95       	dec	r18
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xa4>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <USART_init>:
/****************** USART Configuration **********************/

void USART_init(void)
{
	/*Set baud rate */
	UBRRH = (BAUDRATE>>8);
 18c:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUDRATE;
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 1stop bit, no parity */
	UCSRC = (3<<UCSZ0);
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 bd       	out	0x20, r24	; 32
	
	/* Enable interrupt */
	UCSRB |= (1 << RXCIE);
 19a:	57 9a       	sbi	0x0a, 7	; 10
 19c:	08 95       	ret

0000019e <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while(~(UCSRA) & (1<<RXC));
 19e:	5f 9b       	sbis	0x0b, 7	; 11
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <USART_receive>

	/* Get and return received data from buffer */
	return UDR;
 1a2:	8c b1       	in	r24, 0x0c	; 12
}
 1a4:	08 95       	ret

000001a6 <__vector_11>:
inline void RFID_ready(void) {
	/* RFID buffer is ready to be refilled*/
	RF.done = false;
}

ISR(USART_RXC_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	/* load RFID into buffer */
	char num = USART_receive();
 1c8:	0e 94 cf 00 	call	0x19e	; 0x19e <USART_receive>
	if(!RF.done) {
 1cc:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <_edata+0x12>
 1d0:	91 11       	cpse	r25, r1
 1d2:	17 c0       	rjmp	.+46     	; 0x202 <__vector_11+0x5c>
		RF.ID[RF.index++] = num;
 1d4:	a0 e6       	ldi	r26, 0x60	; 96
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	51 96       	adiw	r26, 0x11	; 17
 1da:	ec 91       	ld	r30, X
 1dc:	51 97       	sbiw	r26, 0x11	; 17
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9e 0f       	add	r25, r30
 1e2:	51 96       	adiw	r26, 0x11	; 17
 1e4:	9c 93       	st	X, r25
 1e6:	51 97       	sbiw	r26, 0x11	; 17
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e0 5a       	subi	r30, 0xA0	; 160
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	80 83       	st	Z, r24
		if(RF.index == SIZE) {
 1f0:	51 96       	adiw	r26, 0x11	; 17
 1f2:	8c 91       	ld	r24, X
 1f4:	51 97       	sbiw	r26, 0x11	; 17
 1f6:	80 31       	cpi	r24, 0x10	; 16
 1f8:	21 f4       	brne	.+8      	; 0x202 <__vector_11+0x5c>
			RF.index = 0;
 1fa:	fd 01       	movw	r30, r26
 1fc:	11 8a       	std	Z+17, r1	; 0x11
			RF.done = true;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	82 8b       	std	Z+18, r24	; 0x12
		}
	}

}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:


int main( void )
{

	lcd_init();
 224:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_init>
	USART_init();
 228:	0e 94 c6 00 	call	0x18c	; 0x18c <USART_init>
	sei();
 22c:	78 94       	sei
	volatile uint8_t index;
	volatile bool done;
}RF;

inline void RFID_done(void) {
	while(!RF.done);
 22e:	00 e6       	ldi	r16, 0x60	; 96
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	ee 24       	eor	r14, r14
 234:	e3 94       	inc	r14
 236:	f1 2c       	mov	r15, r1
 238:	f8 01       	movw	r30, r16
 23a:	82 89       	ldd	r24, Z+18	; 0x12
 23c:	88 23       	and	r24, r24
 23e:	e1 f3       	breq	.-8      	; 0x238 <main+0x14>
 240:	ce 2d       	mov	r28, r14
 242:	df 2d       	mov	r29, r15
	while (1) {
		
		RFID_done();
		
		for(uint8_t i = 1; i < 11; i++) {
			lcd_char(RF.ID[i]);
 244:	fe 01       	movw	r30, r28
 246:	e0 5a       	subi	r30, 0xA0	; 160
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	80 81       	ld	r24, Z
 24c:	0e 94 56 00 	call	0xac	; 0xac <lcd_char>
 250:	85 e8       	ldi	r24, 0x85	; 133
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x2e>
 256:	00 00       	nop
 258:	21 96       	adiw	r28, 0x01	; 1

	while (1) {
		
		RFID_done();
		
		for(uint8_t i = 1; i < 11; i++) {
 25a:	cb 30       	cpi	r28, 0x0B	; 11
 25c:	d1 05       	cpc	r29, r1
 25e:	91 f7       	brne	.-28     	; 0x244 <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	9f ef       	ldi	r25, 0xFF	; 255
 262:	e1 ee       	ldi	r30, 0xE1	; 225
 264:	f4 e0       	ldi	r31, 0x04	; 4
 266:	91 50       	subi	r25, 0x01	; 1
 268:	e0 40       	sbci	r30, 0x00	; 0
 26a:	f0 40       	sbci	r31, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x42>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x4c>
 270:	00 00       	nop
	while(!RF.done);
}

inline void RFID_ready(void) {
	/* RFID buffer is ready to be refilled*/
	RF.done = false;
 272:	f8 01       	movw	r30, r16
 274:	12 8a       	std	Z+18, r1	; 0x12
 276:	e0 cf       	rjmp	.-64     	; 0x238 <main+0x14>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
