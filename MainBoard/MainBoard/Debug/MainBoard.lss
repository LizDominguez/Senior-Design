
MainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000645  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019f  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bb  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b1  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  7a:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_write>:
}


void lcd_write(uint8_t byte)
{
	lcdPort &= ~(1 << lcdD7Bit);                        // assume that data is '0'
  82:	d8 98       	cbi	0x1b, 0	; 27
	if (byte & 1 << 7) lcdPort |= (1 << lcdD7Bit);     // make data = '1' if necessary
  84:	88 23       	and	r24, r24
  86:	0c f4       	brge	.+2      	; 0x8a <lcd_write+0x8>
  88:	d8 9a       	sbi	0x1b, 0	; 27

	lcdPort &= ~(1 << lcdD6Bit);                        // repeat for each data bit
  8a:	d9 98       	cbi	0x1b, 1	; 27
	if (byte & 1 << 6) lcdPort |= (1 << lcdD6Bit);
  8c:	86 fd       	sbrc	r24, 6
  8e:	d9 9a       	sbi	0x1b, 1	; 27

	lcdPort &= ~(1 << lcdD5Bit);
  90:	da 98       	cbi	0x1b, 2	; 27
	if (byte & 1 << 5) lcdPort |= (1 << lcdD5Bit);
  92:	85 fd       	sbrc	r24, 5
  94:	da 9a       	sbi	0x1b, 2	; 27

	lcdPort &= ~(1 << lcdD4Bit);
  96:	db 98       	cbi	0x1b, 3	; 27
	if (byte & 1 << 4) lcdPort |= (1 << lcdD4Bit);
  98:	84 fd       	sbrc	r24, 4
  9a:	db 9a       	sbi	0x1b, 3	; 27

	// write the data
	
	lcdPort |= (1 << lcdEBit);                   // E high
  9c:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_write+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_write+0x24>
	_delay_us(1);                               // data setup
	lcdPort &= ~(1 << lcdEBit);                // E low
  a6:	dc 98       	cbi	0x1b, 4	; 27
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_write+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_write+0x2e>
  b0:	08 95       	ret

000000b2 <lcd_char>:
}



void lcd_char(uint8_t data)
{
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
	lcdPort |= (1 << lcdRSBit);                 // RS high
  b6:	dd 9a       	sbi	0x1b, 5	; 27
	lcdPort &= ~(1 << lcdEBit);                // E low
  b8:	dc 98       	cbi	0x1b, 4	; 27
	lcd_write(data);                          // write the upper four bits of data
  ba:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
	lcd_write(data << 4);                    // write the lower 4 bits of data
  be:	8c 2f       	mov	r24, r28
  c0:	82 95       	swap	r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <lcd_string>:
	_delay_us(50);               // same delay as off
}


void lcd_string(uint8_t string[])
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	51 f0       	breq	.+20     	; 0xec <lcd_string+0x20>
  d8:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_char(string[i]);
  da:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_char>
  de:	85 e8       	ldi	r24, 0x85	; 133
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_string+0x14>
  e4:	00 00       	nop


void lcd_string(uint8_t string[])
{
	int i = 0;                             //while the string is not empty
	while (string[i] != 0)
  e6:	89 91       	ld	r24, Y+
  e8:	81 11       	cpse	r24, r1
  ea:	f7 cf       	rjmp	.-18     	; 0xda <lcd_string+0xe>
	{
		lcd_char(string[i]);
		i++;
		_delay_us(50);                              //40 us delay min
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <lcd_instruction>:
	lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	lcdPort &= ~(1 << lcdRSBit);                // RS low
  f6:	dd 98       	cbi	0x1b, 5	; 27
	lcdPort &= ~(1 << lcdEBit);                // E low
  f8:	dc 98       	cbi	0x1b, 4	; 27
	lcd_write(instruction);                   // write the upper 4 bits of data
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
	lcd_write(instruction << 4);             // write the lower 4 bits of data
  fe:	8c 2f       	mov	r24, r28
 100:	82 95       	swap	r24
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_init>:
void lcd_init(void);


void lcd_init(void)
{
	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
 10c:	8a b3       	in	r24, 0x1a	; 26
 10e:	8f 63       	ori	r24, 0x3F	; 63
 110:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	80 e7       	ldi	r24, 0x70	; 112
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <lcd_init+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x16>
 122:	00 00       	nop
	_delay_ms(100);

	lcdPort &= ~(1 << lcdRSBit);                 // RS low
 124:	dd 98       	cbi	0x1b, 5	; 27
	lcdPort &= ~(1 << lcdEBit);                 // E low
 126:	dc 98       	cbi	0x1b, 4	; 27

	// LCD resets
	lcd_write(reset);
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	9e e3       	ldi	r25, 0x3E	; 62
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_init+0x26>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_init+0x2c>
 138:	00 00       	nop
	_delay_ms(8);                           // 5 ms delay min

	lcd_write(reset);
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e8       	ldi	r24, 0x8F	; 143
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x38>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x3e>
 14a:	00 00       	nop
	_delay_us(200);                       // 100 us delay min

	lcd_write(reset);
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
 152:	8f e8       	ldi	r24, 0x8F	; 143
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x4a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_init+0x50>
 15c:	00 00       	nop
	_delay_us(200);
	
	lcd_write(bit4Mode);               	//set to 4 bit mode
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
 164:	95 e8       	ldi	r25, 0x85	; 133
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x5a>
 16a:	00 00       	nop
	_delay_us(50);                     // 40us delay min

	lcd_instruction(bit4Mode);   	 // set 4 bit mode
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_instruction>
 172:	25 e8       	ldi	r18, 0x85	; 133
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_init+0x68>
 178:	00 00       	nop
	_delay_us(50);                  // 40 us delay min

	// display off
	lcd_instruction(off);        	// turn off display
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_instruction>
 180:	85 e8       	ldi	r24, 0x85	; 133
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x76>
 186:	00 00       	nop
	_delay_us(50);

	// Clear display
	lcd_instruction(clear);              // clear display
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f e6       	ldi	r24, 0x6F	; 111
 190:	97 e1       	ldi	r25, 0x17	; 23
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x86>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x8c>
 198:	00 00       	nop
	_delay_ms(3);                       // 1.64 ms delay min

	// entry mode
	lcd_instruction(entryMode);          // this instruction shifts the cursor
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	9a e6       	ldi	r25, 0x6A	; 106
 1a2:	9a 95       	dec	r25
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x96>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x9c>
	_delay_us(40);                      // 40 us delay min

	// Display on
	lcd_instruction(on);          // turn on the display
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_instruction>
 1ae:	25 e8       	ldi	r18, 0x85	; 133
 1b0:	2a 95       	dec	r18
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0xa4>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <main>:


int main( void )
{

	lcd_init();
 1b8:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_init>
	
	lcd_string((uint8_t *)"Wifi module is");
 1bc:	80 e6       	ldi	r24, 0x60	; 96
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_string>
	lcd_instruction(setCursor | lineTwo);
 1c4:	80 ec       	ldi	r24, 0xC0	; 192
 1c6:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_instruction>
	lcd_string((uint8_t *)"deactivated");
 1ca:	8f e6       	ldi	r24, 0x6F	; 111
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_string>

	while (1) {
		
	}
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x1a>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
